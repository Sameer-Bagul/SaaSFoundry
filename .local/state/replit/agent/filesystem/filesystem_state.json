{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack AI SaaS application built with React, Express, and PostgreSQL. The application provides an AI-powered platform where users can purchase credits and consume AI services through API calls. It features a comprehensive dashboard for managing credits, payments, user profiles, and settings, with integrated payment processing through Razorpay.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Components**: Shadcn/ui component library with Radix UI primitives for accessible components\n- **Styling**: Tailwind CSS with custom CSS variables for theming (light/dark mode support)\n- **State Management**: TanStack React Query for server state management and data fetching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod schema validation\n\n## Backend Architecture\n- **Runtime**: Node.js with Express framework\n- **Language**: TypeScript with ES modules\n- **Authentication**: Passport.js with local strategy using session-based authentication\n- **Password Security**: Built-in crypto module with scrypt for password hashing\n- **Session Management**: Express sessions with in-memory storage (MemoryStore)\n\n## Data Layer\n- **Database**: PostgreSQL with Neon serverless connection\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema Validation**: Zod schemas for runtime type checking and validation\n- **Migrations**: Drizzle Kit for database migrations and schema management\n\n## Project Structure\n- **Monorepo Design**: Shared schemas between client and server via `/shared` directory\n- **Client**: React application in `/client` directory\n- **Server**: Express API in `/server` directory  \n- **Shared**: Common TypeScript types and Zod schemas in `/shared` directory\n\n## Core Features\n- **Credit System**: Users purchase credit packages to consume AI services\n- **Dashboard**: Real-time stats showing credit usage, API calls, and success rates\n- **Payment Processing**: Integrated with Razorpay for Indian and international payments\n- **User Management**: Profile management, settings, and preferences\n- **Support System**: Built-in ticketing system for customer support\n- **API Usage Tracking**: Monitoring and analytics for API consumption\n\n## Security & Authentication\n- **Session-based Authentication**: Secure session management with CSRF protection\n- **Password Hashing**: Crypto-based password hashing with salt\n- **Protected Routes**: Client-side route protection for authenticated users\n- **API Security**: Server-side authentication middleware for API endpoints\n\n# External Dependencies\n\n## Payment Integration\n- **Razorpay**: Primary payment gateway for processing credit purchases in USD and INR\n\n## Database & Hosting\n- **Neon Database**: Serverless PostgreSQL database with connection pooling\n- **Replit**: Development environment with integrated deployment\n\n## UI & Styling\n- **Radix UI**: Headless UI components for accessibility and customization\n- **Tailwind CSS**: Utility-first CSS framework with PostCSS processing\n- **Lucide React**: Icon library for consistent iconography\n- **Google Fonts**: Typography including Space Grotesk, Noto Sans, and Material Symbols\n\n## Development Tools\n- **Vite**: Build tool with React plugin and development server\n- **TypeScript**: Type safety across the entire application\n- **ESBuild**: Production bundling for the server\n- **Drizzle Kit**: Database schema management and migrations","size_bytes":3580},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        heading: [\"var(--font-heading)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2797},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      const user = await storage.getUserByUsername(username);\n      if (!user || !(await comparePasswords(password, user.password))) {\n        return done(null, false);\n      } else {\n        return done(null, user);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    const existingUser = await storage.getUserByUsername(req.body.username);\n    if (existingUser) {\n      return res.status(400).send(\"Username already exists\");\n    }\n\n    const user = await storage.createUser({\n      ...req.body,\n      password: await hashPassword(req.body.password),\n    });\n\n    req.login(user, (err) => {\n      if (err) return next(err);\n      res.status(201).json(user);\n    });\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n","size_bytes":2700},"server/index.ts":{"content":"// Import the new MongoDB MVC server\nimport { startServer } from './server-mvc';\n\n// Start the MongoDB MVC server\nstartServer();\n","size_bytes":129},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { setupAuth } from \"./auth\";\nimport { storage } from \"./storage\";\nimport { insertTransactionSchema, insertUserSettingsSchema, insertSupportTicketSchema, insertChatMessageSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport crypto from \"crypto\";\n\nexport function registerRoutes(app: Express): Server {\n  setupAuth(app);\n\n  // Credit packages configuration\n  const creditPackages = {\n    starter: { credits: 1000, priceUSD: 10, priceINR: 800, name: \"Starter Pack\" },\n    professional: { credits: 5000, priceUSD: 45, priceINR: 3600, name: \"Professional Pack\" },\n    enterprise: { credits: 10000, priceUSD: 80, priceINR: 6400, name: \"Enterprise Pack\" }\n  };\n\n  // Get user dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n\n    const user = req.user!;\n    const transactions = await storage.getTransactions(user.id);\n    const apiUsage = await storage.getApiUsage(user.id);\n\n    const totalSpent = transactions\n      .filter(t => t.status === \"completed\")\n      .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n\n    const creditsUsed = apiUsage.reduce((sum, u) => sum + u.creditsUsed, 0);\n    const apiCalls = apiUsage.length;\n    const successRate = apiUsage.length > 0 \n      ? (apiUsage.filter(u => u.success).length / apiUsage.length) * 100 \n      : 100;\n\n    res.json({\n      totalCredits: user.credits,\n      creditsUsed,\n      apiCalls,\n      successRate: successRate.toFixed(1),\n      totalSpent: totalSpent.toFixed(2),\n    });\n  });\n\n  // Get recent activity\n  app.get(\"/api/dashboard/activity\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n\n    const user = req.user!;\n    const transactions = await storage.getTransactions(user.id);\n    const apiUsage = await storage.getApiUsage(user.id);\n\n    const activity = [\n      ...transactions.slice(0, 3).map(t => ({\n        type: \"transaction\",\n        title: \"Credits Purchased\",\n        description: `${t.credits} credits added to account`,\n        time: t.createdAt,\n        icon: \"account_balance_wallet\",\n      })),\n      ...apiUsage.slice(0, 2).map(u => ({\n        type: \"api_usage\",\n        title: \"AI Analysis Completed\",\n        description: `${u.endpoint} processed successfully`,\n        time: u.createdAt,\n        icon: \"psychology\",\n      }))\n    ].sort((a, b) => b.time.getTime() - a.time.getTime()).slice(0, 5);\n\n    res.json(activity);\n  });\n\n  // Get credit packages\n  app.get(\"/api/credits/packages\", (req, res) => {\n    res.json(creditPackages);\n  });\n\n  // Create Razorpay order\n  app.post(\"/api/credits/create-order\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n\n    const { packageType, currency } = req.body;\n    \n    if (!creditPackages[packageType as keyof typeof creditPackages]) {\n      return res.status(400).json({ message: \"Invalid package type\" });\n    }\n\n    const pkg = creditPackages[packageType as keyof typeof creditPackages];\n    const amount = currency === \"INR\" ? pkg.priceINR : pkg.priceUSD;\n\n    try {\n      // In a real implementation, you would use the Razorpay SDK here\n      const orderId = `order_${crypto.randomBytes(12).toString('hex')}`;\n      \n      // Create pending transaction\n      await storage.createTransaction({\n        userId: req.user!.id,\n        transactionId: `txn_${crypto.randomBytes(12).toString('hex')}`,\n        packageName: pkg.name,\n        credits: pkg.credits,\n        amount: amount.toString(),\n        currency,\n        status: \"pending\",\n        paymentMethod: \"razorpay\",\n        razorpayOrderId: orderId,\n        razorpayPaymentId: null,\n      });\n\n      res.json({\n        orderId,\n        amount: amount * 100, // Razorpay expects amount in paise/cents\n        currency,\n        key: process.env.RAZORPAY_KEY_ID || \"rzp_test_key\",\n      });\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  // Verify payment and update credits\n  app.post(\"/api/credits/verify-payment\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n\n    const { razorpayOrderId, razorpayPaymentId, razorpaySignature } = req.body;\n\n    try {\n      // In a real implementation, you would verify the signature with Razorpay\n      // For now, we'll simulate successful verification\n      \n      const transaction = await storage.getTransactions(req.user!.id);\n      const pendingTransaction = transaction.find(t => \n        t.razorpayOrderId === razorpayOrderId && t.status === \"pending\"\n      );\n\n      if (!pendingTransaction) {\n        return res.status(400).json({ message: \"Transaction not found\" });\n      }\n\n      // Update transaction status\n      await storage.updateTransaction(pendingTransaction.id, {\n        status: \"completed\",\n        razorpayPaymentId,\n      });\n\n      // Add credits to user\n      const user = req.user!;\n      await storage.updateUser(user.id, {\n        credits: user.credits + pendingTransaction.credits,\n      });\n\n      res.json({ message: \"Payment verified and credits added successfully\" });\n    } catch (error) {\n      console.error(\"Error verifying payment:\", error);\n      res.status(500).json({ message: \"Failed to verify payment\" });\n    }\n  });\n\n  // Get user profile\n  app.get(\"/api/profile\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const user = req.user!;\n    const { password, ...userWithoutPassword } = user;\n    res.json(userWithoutPassword);\n  });\n\n  // Update user profile\n  app.patch(\"/api/profile\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n\n    try {\n      const { firstName, lastName, email, phone, company } = req.body;\n      const updatedUser = await storage.updateUser(req.user!.id, {\n        firstName,\n        lastName,\n        email,\n        phone,\n        company,\n      });\n\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const { password, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Get payment history\n  app.get(\"/api/payments\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n\n    const transactions = await storage.getTransactions(req.user!.id);\n    res.json(transactions);\n  });\n\n  // Get payment summary\n  app.get(\"/api/payments/summary\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n\n    const transactions = await storage.getTransactions(req.user!.id);\n    const completedTransactions = transactions.filter(t => t.status === \"completed\");\n\n    const totalSpent = completedTransactions.reduce((sum, t) => sum + parseFloat(t.amount), 0);\n    const totalTransactions = completedTransactions.length;\n    const totalCredits = completedTransactions.reduce((sum, t) => sum + t.credits, 0);\n\n    res.json({\n      totalSpent: totalSpent.toFixed(2),\n      totalTransactions,\n      totalCredits,\n    });\n  });\n\n  // Get user settings\n  app.get(\"/api/settings\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n\n    const settings = await storage.getUserSettings(req.user!.id);\n    if (!settings) {\n      return res.status(404).json({ message: \"Settings not found\" });\n    }\n\n    res.json(settings);\n  });\n\n  // Update user settings\n  app.patch(\"/api/settings\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n\n    try {\n      const updateData = insertUserSettingsSchema.partial().parse(req.body);\n      const updatedSettings = await storage.updateUserSettings(req.user!.id, updateData);\n\n      if (!updatedSettings) {\n        return res.status(404).json({ message: \"Settings not found\" });\n      }\n\n      res.json(updatedSettings);\n    } catch (error) {\n      console.error(\"Error updating settings:\", error);\n      res.status(500).json({ message: \"Failed to update settings\" });\n    }\n  });\n\n  // Create support ticket\n  app.post(\"/api/support/tickets\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n\n    try {\n      const ticketData = insertSupportTicketSchema.parse({\n        ...req.body,\n        userId: req.user!.id,\n      });\n\n      const ticket = await storage.createSupportTicket(ticketData);\n      res.status(201).json(ticket);\n    } catch (error) {\n      console.error(\"Error creating support ticket:\", error);\n      res.status(500).json({ message: \"Failed to create support ticket\" });\n    }\n  });\n\n  // Get support tickets\n  app.get(\"/api/support/tickets\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n\n    const tickets = await storage.getSupportTickets(req.user!.id);\n    res.json(tickets);\n  });\n\n  // Chat endpoint\n  app.post(\"/api/chat\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n\n    const { message } = req.body;\n    \n    if (!message || typeof message !== 'string') {\n      return res.status(400).json({ message: \"Message is required\" });\n    }\n\n    const user = req.user!;\n    const creditsRequired = Math.max(1, Math.floor(message.length / 100)); // 1 credit per ~100 characters, minimum 1\n\n    if (user.credits < creditsRequired) {\n      return res.status(400).json({ \n        message: `Insufficient credits. Required: ${creditsRequired}, Available: ${user.credits}` \n      });\n    }\n\n    try {\n      // Save user message\n      const userMessage = await storage.createChatMessage({\n        userId: user.id,\n        role: \"user\",\n        content: message,\n        creditsUsed: 0,\n      });\n\n      // Simple AI response simulation (in production, replace with actual AI API call)\n      const aiResponses = [\n        \"That's a great question! Let me help you with that.\",\n        \"I understand what you're asking. Here's my perspective on this topic.\",\n        \"Based on your message, I can provide some insights that might be helpful.\",\n        \"Thank you for sharing that with me. Let me think about this and provide a thoughtful response.\",\n        \"This is an interesting point you've raised. Let me break this down for you.\",\n        \"I appreciate your question. Here's how I would approach this situation.\",\n      ];\n      \n      const baseResponse = aiResponses[Math.floor(Math.random() * aiResponses.length)];\n      const aiResponse = `${baseResponse}\\n\\nRegarding your message: \"${message.length > 100 ? message.substring(0, 100) + '...' : message}\"\\n\\nThis is a demonstration response from the AI assistant. In a production environment, this would be replaced with actual AI processing using services like OpenAI GPT, Anthropic Claude, or similar AI models. The response would be tailored to your specific query and provide relevant, helpful information.`;\n\n      // Save AI response\n      await storage.createChatMessage({\n        userId: user.id,\n        role: \"assistant\",\n        content: aiResponse,\n        creditsUsed: creditsRequired,\n      });\n\n      // Deduct credits from user\n      await storage.updateUser(user.id, {\n        credits: user.credits - creditsRequired,\n      });\n\n      // Log API usage\n      await storage.createApiUsage({\n        userId: user.id,\n        endpoint: \"/api/chat\",\n        method: \"POST\",\n        creditsUsed: creditsRequired,\n        success: true,\n      });\n\n      res.json({\n        message: aiResponse,\n        creditsUsed: creditsRequired,\n        remainingCredits: user.credits - creditsRequired,\n      });\n    } catch (error) {\n      console.error(\"Error processing chat:\", error);\n      \n      // Log failed API usage\n      await storage.createApiUsage({\n        userId: user.id,\n        endpoint: \"/api/chat\",\n        method: \"POST\",\n        creditsUsed: 0,\n        success: false,\n      });\n\n      res.status(500).json({ message: \"Failed to process chat message\" });\n    }\n  });\n\n  // Get chat history\n  app.get(\"/api/chat/history\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n\n    const limit = parseInt(req.query.limit as string) || 50;\n    const messages = await storage.getChatMessages(req.user!.id, limit);\n    res.json(messages);\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12492},"server/server-mvc.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport mongoose from 'mongoose';\nimport connectDB from './config/database';\nimport { config } from './config/environment';\nimport { setupVite, serveStatic, log } from \"./vite\";\n\n// Import models\nimport User, { IUser } from './models/User';\n\n// Import routes\nimport authRoutes from './routes/authRoutes';\nimport userRoutes from './routes/userRoutes';\nimport transactionRoutes from './routes/transactionRoutes';\nimport supportRoutes from './routes/supportRoutes';\nimport paymentRoutes from './routes/paymentRoutes';\n\n// Create Express app\nconst app = express();\n\n// Trust proxy for Replit environment (important for session cookies)\napp.set('trust proxy', 1);\n\n// Middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration\napp.use(session({\n  secret: config.sessionSecret,\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: config.isProduction,\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    sameSite: 'lax', // Important for cross-origin requests in development\n    httpOnly: true // Security: prevent XSS attacks\n  }\n}));\n\n// Passport configuration\napp.use(passport.initialize());\napp.use(passport.session());\n\n// Configure Local Strategy\npassport.use(new LocalStrategy(\n  {\n    usernameField: 'username'\n  },\n  async (username: string, password: string, done) => {\n    try {\n      // Find user by username or email\n      const user = await User.findOne({\n        $or: [{ username }, { email: username }]\n      });\n\n      if (!user) {\n        return done(null, false, { message: 'Invalid credentials' });\n      }\n\n      // Check password\n      const isValidPassword = await user.comparePassword(password);\n      if (!isValidPassword) {\n        return done(null, false, { message: 'Invalid credentials' });\n      }\n\n      return done(null, user as any);\n    } catch (error) {\n      return done(error);\n    }\n  }\n));\n\n// Serialize user\npassport.serializeUser((user: any, done) => {\n  done(null, user._id);\n});\n\n// Deserialize user\npassport.deserializeUser(async (id: string, done) => {\n  try {\n    const user = await User.findById(id).select('-password');\n    done(null, user as any);\n  } catch (error) {\n    done(error, null);\n  }\n});\n\n// Request logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// API Routes\napp.use('/api', authRoutes);\napp.use('/api/user', userRoutes);\napp.use('/api/transactions', transactionRoutes);\napp.use('/api/support', supportRoutes);\napp.use('/api/payments', paymentRoutes);\n\n// Health check endpoint\napp.get('/api/health', (req, res) => {\n  const mongoStatus = (() => {\n    switch (mongoose.connection.readyState) {\n      case 0: return 'disconnected';\n      case 1: return 'connected';\n      case 2: return 'connecting';\n      case 3: return 'disconnecting';\n      default: return 'unknown';\n    }\n  })();\n\n  res.json({ \n    status: 'ok', \n    timestamp: new Date().toISOString(),\n    server: 'running',\n    database: {\n      mongodb: mongoStatus,\n      url: config.mongodbUrl ? 'configured' : 'not configured'\n    },\n    environment: config.nodeEnv\n  });\n});\n\n// Error handling middleware\napp.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n  const status = err.status || err.statusCode || 500;\n  const message = err.message || \"Internal Server Error\";\n\n  console.error('Error:', err);\n  res.status(status).json({ message });\n});\n\n// Start server with MongoDB connection\nconst startServer = async () => {\n  try {\n    // Try to connect to MongoDB (non-fatal)\n    const isDbConnected = await connectDB(config.mongodbUrl);\n\n    // Create HTTP server\n    const server = app.listen({\n      port: config.port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    });\n\n    // Setup Vite in development\n    if (config.isDevelopment) {\n      await setupVite(app, server);\n    } else {\n      serveStatic(app);\n    }\n\n    log(`🚀 Server running on port ${config.port}`);\n    log(`📄 Environment: ${config.nodeEnv}`);\n    \n    if (isDbConnected) {\n      log(`🗄️  Database: Connected to MongoDB`);\n    } else {\n      log(`⚠️  Database: Not connected - API routes will return errors until database is configured`);\n    }\n\n    return server;\n  } catch (error) {\n    console.error('💥 Failed to start server:', error);\n    process.exit(1);\n  }\n};\n\n// Handle graceful shutdown\nprocess.on('SIGINT', () => {\n  log('Received SIGINT. Graceful shutdown...');\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', () => {\n  log('Received SIGTERM. Graceful shutdown...');\n  process.exit(0);\n});\n\n// Start the server (ES module compatible check)\nif (import.meta.url === `file://${process.argv[1]}`) {\n  startServer();\n}\n\nexport { app, startServer };","size_bytes":5599},"server/storage.ts":{"content":"import { type User, type InsertUser, type Transaction, type InsertTransaction, type UserSettings, type InsertUserSettings, type SupportTicket, type InsertSupportTicket, type ApiUsage, type InsertApiUsage, type ChatMessage, type InsertChatMessage } from \"@shared/schema\";\nimport { randomUUID, randomBytes } from \"crypto\";\nimport session from \"express-session\";\nimport createMemoryStore from \"memorystore\";\n\nconst MemoryStore = createMemoryStore(session);\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  deleteUser(id: string): Promise<boolean>;\n  \n  // Transaction methods\n  getTransactions(userId: string): Promise<Transaction[]>;\n  getTransaction(id: string): Promise<Transaction | undefined>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  updateTransaction(id: string, updates: Partial<Transaction>): Promise<Transaction | undefined>;\n  \n  // User settings methods\n  getUserSettings(userId: string): Promise<UserSettings | undefined>;\n  createUserSettings(settings: InsertUserSettings): Promise<UserSettings>;\n  updateUserSettings(userId: string, updates: Partial<UserSettings>): Promise<UserSettings | undefined>;\n  \n  // Support ticket methods\n  getSupportTickets(userId: string): Promise<SupportTicket[]>;\n  createSupportTicket(ticket: InsertSupportTicket): Promise<SupportTicket>;\n  \n  // API usage methods\n  createApiUsage(usage: InsertApiUsage): Promise<ApiUsage>;\n  getApiUsage(userId: string, startDate?: Date, endDate?: Date): Promise<ApiUsage[]>;\n  \n  // Chat message methods\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  getChatMessages(userId: string, limit?: number): Promise<ChatMessage[]>;\n  \n  sessionStore: any;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private transactions: Map<string, Transaction>;\n  private userSettings: Map<string, UserSettings>;\n  private supportTickets: Map<string, SupportTicket>;\n  private apiUsage: Map<string, ApiUsage>;\n  private chatMessages: Map<string, ChatMessage>;\n  sessionStore: any;\n\n  constructor() {\n    this.users = new Map();\n    this.transactions = new Map();\n    this.userSettings = new Map();\n    this.supportTickets = new Map();\n    this.apiUsage = new Map();\n    this.chatMessages = new Map();\n    this.sessionStore = new MemoryStore({\n      checkPeriod: 86400000,\n    });\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const apiKey = `sk-${randomBytes(24).toString('hex')}`;\n    const now = new Date();\n    const user: User = {\n      ...insertUser,\n      id,\n      apiKey,\n      credits: 0,\n      isEmailVerified: false,\n      firstName: insertUser.firstName || null,\n      lastName: insertUser.lastName || null,\n      phone: insertUser.phone || null,\n      company: insertUser.company || null,\n      avatar: insertUser.avatar || null,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.users.set(id, user);\n\n    // Create default settings for the user\n    await this.createUserSettings({\n      userId: id,\n      theme: \"system\",\n      language: \"en\",\n      emailNotifications: true,\n      pushNotifications: false,\n      creditAlerts: true,\n      dataAnalytics: true,\n      marketingCommunications: false,\n      rateLimit: 100,\n    });\n\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n\n    const updatedUser = { ...user, ...updates, updatedAt: new Date() };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    return this.users.delete(id);\n  }\n\n  // Transaction methods\n  async getTransactions(userId: string): Promise<Transaction[]> {\n    return Array.from(this.transactions.values())\n      .filter(transaction => transaction.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getTransaction(id: string): Promise<Transaction | undefined> {\n    return this.transactions.get(id);\n  }\n\n  async createTransaction(insertTransaction: InsertTransaction): Promise<Transaction> {\n    const id = randomUUID();\n    const now = new Date();\n    const transaction: Transaction = {\n      ...insertTransaction,\n      id,\n      paymentMethod: insertTransaction.paymentMethod || null,\n      razorpayOrderId: insertTransaction.razorpayOrderId || null,\n      razorpayPaymentId: insertTransaction.razorpayPaymentId || null,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.transactions.set(id, transaction);\n    return transaction;\n  }\n\n  async updateTransaction(id: string, updates: Partial<Transaction>): Promise<Transaction | undefined> {\n    const transaction = this.transactions.get(id);\n    if (!transaction) return undefined;\n\n    const updatedTransaction = { ...transaction, ...updates, updatedAt: new Date() };\n    this.transactions.set(id, updatedTransaction);\n    return updatedTransaction;\n  }\n\n  // User settings methods\n  async getUserSettings(userId: string): Promise<UserSettings | undefined> {\n    return Array.from(this.userSettings.values()).find(settings => settings.userId === userId);\n  }\n\n  async createUserSettings(insertSettings: InsertUserSettings): Promise<UserSettings> {\n    const id = randomUUID();\n    const now = new Date();\n    const settings: UserSettings = {\n      id,\n      userId: insertSettings.userId,\n      theme: insertSettings.theme || \"system\",\n      language: insertSettings.language || \"en\",\n      emailNotifications: insertSettings.emailNotifications ?? true,\n      pushNotifications: insertSettings.pushNotifications ?? false,\n      creditAlerts: insertSettings.creditAlerts ?? true,\n      dataAnalytics: insertSettings.dataAnalytics ?? true,\n      marketingCommunications: insertSettings.marketingCommunications ?? false,\n      rateLimit: insertSettings.rateLimit || 100,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.userSettings.set(id, settings);\n    return settings;\n  }\n\n  async updateUserSettings(userId: string, updates: Partial<UserSettings>): Promise<UserSettings | undefined> {\n    const settings = Array.from(this.userSettings.values()).find(s => s.userId === userId);\n    if (!settings) return undefined;\n\n    const updatedSettings = { ...settings, ...updates, updatedAt: new Date() };\n    this.userSettings.set(settings.id, updatedSettings);\n    return updatedSettings;\n  }\n\n  // Support ticket methods\n  async getSupportTickets(userId: string): Promise<SupportTicket[]> {\n    return Array.from(this.supportTickets.values())\n      .filter(ticket => ticket.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createSupportTicket(insertTicket: InsertSupportTicket): Promise<SupportTicket> {\n    const id = randomUUID();\n    const now = new Date();\n    const ticket: SupportTicket = {\n      ...insertTicket,\n      id,\n      status: \"open\",\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.supportTickets.set(id, ticket);\n    return ticket;\n  }\n\n  // API usage methods\n  async createApiUsage(insertUsage: InsertApiUsage): Promise<ApiUsage> {\n    const id = randomUUID();\n    const usage: ApiUsage = {\n      ...insertUsage,\n      id,\n      createdAt: new Date(),\n    };\n    this.apiUsage.set(id, usage);\n    return usage;\n  }\n\n  async getApiUsage(userId: string, startDate?: Date, endDate?: Date): Promise<ApiUsage[]> {\n    let usage = Array.from(this.apiUsage.values())\n      .filter(u => u.userId === userId);\n\n    if (startDate) {\n      usage = usage.filter(u => u.createdAt >= startDate);\n    }\n    if (endDate) {\n      usage = usage.filter(u => u.createdAt <= endDate);\n    }\n\n    return usage.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  // Chat message methods\n  async createChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const id = randomUUID();\n    const message: ChatMessage = {\n      id,\n      userId: insertMessage.userId,\n      role: insertMessage.role,\n      content: insertMessage.content,\n      creditsUsed: insertMessage.creditsUsed || 0,\n      createdAt: new Date(),\n    };\n    this.chatMessages.set(id, message);\n    return message;\n  }\n\n  async getChatMessages(userId: string, limit: number = 50): Promise<ChatMessage[]> {\n    return Array.from(this.chatMessages.values())\n      .filter(message => message.userId === userId)\n      .sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime())\n      .slice(-limit); // Get the latest messages\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":9320},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, decimal, jsonb, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  phone: text(\"phone\"),\n  company: text(\"company\"),\n  avatar: text(\"avatar\"),\n  credits: integer(\"credits\").default(0).notNull(),\n  apiKey: text(\"api_key\"),\n  isEmailVerified: boolean(\"is_email_verified\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`now()`).notNull(),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`).notNull(),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  transactionId: text(\"transaction_id\").notNull().unique(),\n  packageName: text(\"package_name\").notNull(),\n  credits: integer(\"credits\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").notNull(),\n  status: text(\"status\").notNull(), // completed, pending, failed\n  paymentMethod: text(\"payment_method\"),\n  razorpayOrderId: text(\"razorpay_order_id\"),\n  razorpayPaymentId: text(\"razorpay_payment_id\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`).notNull(),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`).notNull(),\n});\n\nexport const userSettings = pgTable(\"user_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull().unique(),\n  theme: text(\"theme\").default(\"system\").notNull(),\n  language: text(\"language\").default(\"en\").notNull(),\n  emailNotifications: boolean(\"email_notifications\").default(true).notNull(),\n  pushNotifications: boolean(\"push_notifications\").default(false).notNull(),\n  creditAlerts: boolean(\"credit_alerts\").default(true).notNull(),\n  dataAnalytics: boolean(\"data_analytics\").default(true).notNull(),\n  marketingCommunications: boolean(\"marketing_communications\").default(false).notNull(),\n  rateLimit: integer(\"rate_limit\").default(100).notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`now()`).notNull(),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`).notNull(),\n});\n\nexport const supportTickets = pgTable(\"support_tickets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  subject: text(\"subject\").notNull(),\n  category: text(\"category\").notNull(),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").default(\"open\").notNull(), // open, in_progress, resolved, closed\n  createdAt: timestamp(\"created_at\").default(sql`now()`).notNull(),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`).notNull(),\n});\n\nexport const apiUsage = pgTable(\"api_usage\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  endpoint: text(\"endpoint\").notNull(),\n  method: text(\"method\").notNull(),\n  creditsUsed: integer(\"credits_used\").notNull(),\n  success: boolean(\"success\").notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`now()`).notNull(),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  role: text(\"role\").notNull(), // 'user' or 'assistant'\n  content: text(\"content\").notNull(),\n  creditsUsed: integer(\"credits_used\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`now()`).notNull(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  apiKey: true,\n  credits: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSettingsSchema = createInsertSchema(userSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSupportTicketSchema = createInsertSchema(supportTickets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  status: true,\n});\n\nexport const insertApiUsageSchema = createInsertSchema(apiUsage).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type UserSettings = typeof userSettings.$inferSelect;\nexport type InsertUserSettings = z.infer<typeof insertUserSettingsSchema>;\nexport type SupportTicket = typeof supportTickets.$inferSelect;\nexport type InsertSupportTicket = z.infer<typeof insertSupportTicketSchema>;\nexport type ApiUsage = typeof apiUsage.$inferSelect;\nexport type InsertApiUsage = z.infer<typeof insertApiUsageSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n","size_bytes":5531},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"./components/theme-provider\";\nimport { AuthProvider } from \"./hooks/use-auth\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\n\nimport LandingPage from \"@/pages/landing-page\";\nimport AuthPage from \"@/pages/auth-page\";\nimport AppPage from \"@/pages/app-page\";\nimport BuyCreditsPage from \"@/pages/buy-credits-page\";\nimport PaymentSuccessPage from \"@/pages/payment-success-page\";\nimport PaymentFailurePage from \"@/pages/payment-failure-page\";\nimport DashboardPage from \"@/pages/dashboard-page\";\nimport CreditsPage from \"@/pages/credits-page\";\nimport ProfilePage from \"@/pages/profile-page\";\nimport SettingsPage from \"@/pages/settings-page\";\nimport PaymentHistoryPage from \"@/pages/payment-history-page\";\nimport SupportPage from \"@/pages/support-page\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={LandingPage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <ProtectedRoute path=\"/app\" component={AppPage} />\n      <ProtectedRoute path=\"/buy-credits\" component={BuyCreditsPage} />\n      <ProtectedRoute path=\"/payment/success\" component={PaymentSuccessPage} />\n      <ProtectedRoute path=\"/payment/failure\" component={PaymentFailurePage} />\n      <ProtectedRoute path=\"/dashboard\" component={DashboardPage} />\n      <ProtectedRoute path=\"/credits\" component={CreditsPage} />\n      <ProtectedRoute path=\"/profile\" component={ProfilePage} />\n      <ProtectedRoute path=\"/settings\" component={SettingsPage} />\n      <ProtectedRoute path=\"/payments\" component={PaymentHistoryPage} />\n      <ProtectedRoute path=\"/support\" component={SupportPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <AuthProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2311},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(240 10% 3.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(240 10% 3.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(240 10% 3.9%);\n  --primary: hsl(221 83% 53%);\n  --primary-foreground: hsl(0 0% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 84% 4.9%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222.2 84% 4.9%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(221 83% 53%);\n  --chart-1: hsl(12 76% 61%);\n  --chart-2: hsl(173 58% 39%);\n  --chart-3: hsl(197 37% 24%);\n  --chart-4: hsl(43 74% 66%);\n  --chart-5: hsl(27 87% 67%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(240 10% 3.9%);\n  --sidebar-primary: hsl(221 83% 53%);\n  --sidebar-primary-foreground: hsl(0 0% 98%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-border: hsl(214.3 31.8% 91.4%);\n  --sidebar-ring: hsl(221 83% 53%);\n  --radius: 0.5rem;\n  --font-sans: 'Noto Sans', system-ui, -apple-system, sans-serif;\n  --font-serif: 'Noto Serif', serif;\n  --font-mono: 'Noto Sans Mono', monospace;\n  --font-heading: 'Space Grotesk', var(--font-sans);\n}\n\n.dark {\n  --background: hsl(240 10% 3.9%);\n  --foreground: hsl(0 0% 98%);\n  --card: hsl(240 10% 3.9%);\n  --card-foreground: hsl(0 0% 98%);\n  --popover: hsl(240 10% 3.9%);\n  --popover-foreground: hsl(0 0% 98%);\n  --primary: hsl(221 83% 53%);\n  --primary-foreground: hsl(0 0% 98%);\n  --secondary: hsl(240 3.7% 15.9%);\n  --secondary-foreground: hsl(0 0% 98%);\n  --muted: hsl(240 3.7% 15.9%);\n  --muted-foreground: hsl(240 5% 64.9%);\n  --accent: hsl(240 3.7% 15.9%);\n  --accent-foreground: hsl(0 0% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(240 3.7% 15.9%);\n  --input: hsl(240 3.7% 15.9%);\n  --ring: hsl(221 83% 53%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n  --sidebar: hsl(240 10% 3.9%);\n  --sidebar-foreground: hsl(0 0% 98%);\n  --sidebar-primary: hsl(221 83% 53%);\n  --sidebar-primary-foreground: hsl(0 0% 98%);\n  --sidebar-accent: hsl(240 3.7% 15.9%);\n  --sidebar-accent-foreground: hsl(0 0% 98%);\n  --sidebar-border: hsl(240 3.7% 15.9%);\n  --sidebar-ring: hsl(221 83% 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  .font-heading {\n    font-family: var(--font-heading);\n  }\n\n  .font-body {\n    font-family: var(--font-sans);\n  }\n\n  .material-symbols-outlined {\n    font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 24;\n    font-family: 'Material Symbols Outlined';\n    font-weight: normal;\n    font-style: normal;\n    font-size: 24px;\n    line-height: 1;\n    letter-spacing: normal;\n    text-transform: none;\n    display: inline-block;\n    white-space: nowrap;\n    word-wrap: normal;\n    direction: ltr;\n    -webkit-font-feature-settings: 'liga';\n    -webkit-font-smoothing: antialiased;\n  }\n}\n\n@layer components {\n  .sidebar-link {\n    @apply flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors;\n  }\n\n  .nav-link {\n    @apply text-foreground hover:text-primary px-3 py-2 text-sm font-medium transition-colors;\n  }\n\n  .credit-package {\n    @apply bg-card p-6 rounded-lg border hover:border-primary transition-colors cursor-pointer;\n  }\n\n  .credit-package.selected {\n    @apply border-primary ring-2 ring-primary ring-opacity-20;\n  }\n}\n\n@layer utilities {\n  .animate-pulse {\n    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n  \n  @keyframes pulse {\n    0%, 100% {\n      opacity: 1;\n    }\n    50% {\n      opacity: .5;\n    }\n  }\n\n  /* Responsive utilities for mobile-first design */\n  .responsive-grid {\n    @apply grid grid-cols-1 gap-4;\n  }\n  \n  .responsive-grid-2 {\n    @apply grid grid-cols-1 sm:grid-cols-2 gap-4;\n  }\n  \n  .responsive-grid-3 {\n    @apply grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4;\n  }\n  \n  .responsive-grid-4 {\n    @apply grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4;\n  }\n  \n  .responsive-padding {\n    @apply p-4 sm:p-6 lg:p-8;\n  }\n  \n  .responsive-text {\n    @apply text-sm sm:text-base;\n  }\n  \n  .responsive-heading {\n    @apply text-xl sm:text-2xl lg:text-3xl;\n  }\n\n  /* Mobile-first responsive breakpoints */\n  @media (max-width: 640px) {\n    .mobile-full {\n      @apply w-full;\n    }\n    \n    .mobile-hide {\n      @apply hidden;\n    }\n    \n    .mobile-show {\n      @apply block;\n    }\n  }\n\n  @media (min-width: 641px) {\n    .mobile-show {\n      @apply hidden;\n    }\n  }\n}\n","size_bytes":5188},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/config/database.ts":{"content":"import mongoose from 'mongoose';\n\nconst connectDB = async (mongoUrl?: string, options: { retries?: number; delay?: number; timeoutMS?: number } = {}) => {\n  const { retries = 5, delay = 2000, timeoutMS = 5000 } = options;\n  const connectionString = mongoUrl || process.env.MONGODB_URL;\n  \n  // Don't try to connect to localhost in Replit environment\n  const isReplit = !!(process.env.REPL_ID || process.env.REPL_SLUG);\n  if (isReplit && !connectionString) {\n    console.warn('⚠️  Running in Replit without MONGODB_URL. Please set MONGODB_URL environment variable to a cloud MongoDB URI (e.g., MongoDB Atlas)');\n    return false;\n  }\n  \n  const finalConnectionString = connectionString || 'mongodb://localhost:27017/ai-saas';\n  \n  for (let i = 0; i < retries; i++) {\n    try {\n      await mongoose.connect(finalConnectionString, { \n        serverSelectionTimeoutMS: timeoutMS \n      });\n      \n      console.log(`✅ MongoDB connected successfully to: ${finalConnectionString.split('@')[1] || 'localhost'}`);\n      return true;\n    } catch (error: any) {\n      const attempt = i + 1;\n      console.error(`❌ MongoDB connection failed (attempt ${attempt}/${retries}):`, error?.message);\n      \n      if (attempt === retries) {\n        console.error('💥 All MongoDB connection attempts failed. Server will start without database.');\n        return false;\n      }\n      \n      const backoffDelay = delay * Math.pow(2, i);\n      console.log(`⏳ Retrying in ${backoffDelay}ms...`);\n      await new Promise(resolve => setTimeout(resolve, backoffDelay));\n    }\n  }\n  \n  return false;\n};\n\nexport default connectDB;","size_bytes":1613},"server/config/environment.ts":{"content":"import dotenv from 'dotenv';\n\n// Load environment variables\ndotenv.config();\n\nexport const config = {\n  // Server configuration\n  port: process.env.PORT || 5000,\n  nodeEnv: process.env.NODE_ENV || 'development',\n  \n  // MongoDB configuration\n  mongodbUrl: process.env.MONGODB_URL || 'mongodb://localhost:27017/ai-saas',\n  \n  // Session configuration\n  sessionSecret: process.env.SESSION_SECRET || 'your-secret-key-here',\n  \n  // Razorpay configuration\n  razorpayKeyId: process.env.RAZORPAY_KEY_ID,\n  razorpayKeySecret: process.env.RAZORPAY_KEY_SECRET,\n  \n  // Other configuration\n  isDevelopment: process.env.NODE_ENV === 'development',\n  isProduction: process.env.NODE_ENV === 'production'\n};\n\nexport default config;","size_bytes":717},"server/controllers/AuthController.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport passport from 'passport';\nimport User, { IUser } from '../models/User';\nimport UserSettings from '../models/UserSettings';\n\nexport class AuthController {\n  // Register a new user\n  static async register(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { username, email, password, firstName, lastName } = req.body;\n\n      // Check if user already exists\n      const existingUser = await User.findOne({\n        $or: [{ email }, { username }]\n      });\n\n      if (existingUser) {\n        return res.status(400).json({ \n          error: existingUser.email === email ? 'Email already exists' : 'Username already exists' \n        });\n      }\n\n      // Create new user\n      const user = new User({\n        username,\n        email,\n        password,\n        firstName,\n        lastName,\n        credits: 0\n      });\n\n      await user.save();\n\n      // Create default user settings\n      const userSettings = new UserSettings({\n        userId: user._id\n      });\n      await userSettings.save();\n\n      // Log the user in\n      req.logIn(user as any, (err) => {\n        if (err) return next(err);\n        res.status(201).json({ \n          user: {\n            id: user._id,\n            username: user.username,\n            email: user.email,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            credits: user.credits,\n            isEmailVerified: user.isEmailVerified\n          }\n        });\n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      res.status(500).json({ error: 'Registration failed' });\n    }\n  }\n\n  // Login user\n  static async login(req: Request, res: Response, next: NextFunction) {\n    passport.authenticate('local', (err: any, user: IUser | false, info: any) => {\n      if (err) return next(err);\n      \n      if (!user) {\n        return res.status(401).json({ \n          error: info?.message || 'Invalid credentials' \n        });\n      }\n\n      req.logIn(user as any, (loginErr) => {\n        if (loginErr) return next(loginErr);\n        \n        res.json({\n          user: {\n            id: user._id,\n            username: user.username,\n            email: user.email,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            credits: user.credits,\n            isEmailVerified: user.isEmailVerified\n          }\n        });\n      });\n    })(req, res, next);\n  }\n\n  // Logout user\n  static logout(req: Request, res: Response, next: NextFunction) {\n    req.logOut((err) => {\n      if (err) return next(err);\n      res.json({ message: 'Logged out successfully' });\n    });\n  }\n\n  // Get current user\n  static getCurrentUser(req: Request, res: Response) {\n    if (req.user) {\n      const user = req.user as IUser;\n      res.json({\n        user: {\n          id: user._id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          credits: user.credits,\n          isEmailVerified: user.isEmailVerified\n        }\n      });\n    } else {\n      res.status(401).json({ error: 'Not authenticated' });\n    }\n  }\n}\n\nexport default AuthController;","size_bytes":3223},"server/controllers/PaymentController.ts":{"content":"import { Request, Response } from 'express';\nimport Transaction, { ITransaction } from '../models/Transaction';\nimport User, { IUser } from '../models/User';\nimport RazorpayService from '../services/RazorpayService';\n\n// Credit packages available for purchase (aligned with frontend)\nexport const CREDIT_PACKAGES = {\n  starter: { credits: 1000, basePrice: 9.99, name: 'Starter Pack' },\n  professional: { credits: 5000, basePrice: 39.99, name: 'Professional' },\n  enterprise: { credits: 15000, basePrice: 99.99, name: 'Enterprise' },\n  unlimited: { credits: 50000, basePrice: 299.99, name: 'Unlimited' }\n};\n\nexport class PaymentController {\n  // Get available credit packages with pricing for user's country\n  static async getPackages(req: Request, res: Response) {\n    try {\n      const { country = 'US' } = req.query;\n      const billingCountry = String(country).toUpperCase();\n\n      const packages = Object.entries(CREDIT_PACKAGES).map(([key, pkg]) => {\n        const taxInfo = RazorpayService.getTaxInfo(billingCountry);\n        const currency = billingCountry === 'IN' ? 'INR' : 'USD';\n        \n        // Convert USD to INR if needed (simplified conversion - in production, use real exchange rates)\n        let basePrice = pkg.basePrice;\n        if (currency === 'INR') {\n          basePrice = pkg.basePrice * 83; // Approximate USD to INR conversion\n        }\n\n        const taxAmount = taxInfo.applicable ? basePrice * taxInfo.rate : 0;\n        const finalPrice = basePrice + taxAmount;\n\n        return {\n          id: key,\n          name: pkg.name,\n          credits: pkg.credits,\n          basePrice,\n          taxAmount,\n          finalPrice,\n          currency,\n          taxInfo: {\n            rate: taxInfo.rate,\n            name: taxInfo.name,\n            applicable: taxInfo.applicable\n          },\n          formattedPrice: RazorpayService.formatAmount(finalPrice, currency)\n        };\n      });\n\n      res.json({\n        packages,\n        billingCountry,\n        supportedCurrencies: RazorpayService.getSupportedCurrencies()\n      });\n    } catch (error) {\n      console.error('Get packages error:', error);\n      res.status(500).json({ error: 'Failed to get packages' });\n    }\n  }\n\n  // Create Razorpay order\n  static async createOrder(req: Request, res: Response) {\n    try {\n      const user = req.user as IUser;\n      const { packageId, billingCountry = 'US' } = req.body;\n\n      // Validate package\n      const selectedPackage = CREDIT_PACKAGES[packageId as keyof typeof CREDIT_PACKAGES];\n      if (!selectedPackage) {\n        return res.status(400).json({ error: 'Invalid package selected' });\n      }\n\n      const country = String(billingCountry).toUpperCase();\n      const currency = country === 'IN' ? 'INR' : 'USD';\n      \n      // Calculate pricing\n      let basePrice = selectedPackage.basePrice;\n      if (currency === 'INR') {\n        basePrice = selectedPackage.basePrice * 83; // Convert USD to INR\n      }\n\n      const taxInfo = RazorpayService.getTaxInfo(country);\n      const taxAmount = taxInfo.applicable ? basePrice * taxInfo.rate : 0;\n      const finalPrice = basePrice + taxAmount;\n\n      // Create transaction record\n      const transactionId = `txn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      const transaction = new Transaction({\n        userId: user._id,\n        transactionId,\n        packageName: selectedPackage.name,\n        credits: selectedPackage.credits,\n        originalAmount: basePrice,\n        amount: finalPrice,\n        currency,\n        billingCountry: country,\n        taxApplied: taxInfo.applicable,\n        taxRate: taxInfo.rate,\n        taxAmount,\n        status: 'pending'\n      });\n\n      await transaction.save();\n\n      // Create Razorpay order\n      const razorpayOrder = await RazorpayService.createOrder({\n        amount: finalPrice,\n        currency,\n        receipt: transactionId,\n        billingCountry: country\n      });\n\n      // Update transaction with Razorpay order ID\n      transaction.razorpayOrderId = razorpayOrder.id;\n      await transaction.save();\n\n      res.status(201).json({\n        id: razorpayOrder.id,\n        amount: Math.round(finalPrice * 100), // Amount in smallest currency unit for Razorpay\n        currency,\n        transactionId,\n        package: {\n          id: packageId,\n          name: selectedPackage.name,\n          credits: selectedPackage.credits\n        },\n        billing: {\n          country,\n          basePrice,\n          taxAmount,\n          finalPrice,\n          taxInfo\n        }\n      });\n    } catch (error: any) {\n      console.error('Create order error:', error);\n      res.status(500).json({ \n        error: error.message || 'Failed to create payment order' \n      });\n    }\n  }\n\n  // Verify payment and complete transaction\n  static async verifyPayment(req: Request, res: Response) {\n    try {\n      const { razorpay_payment_id, razorpay_order_id, razorpay_signature } = req.body;\n\n      // Verify payment signature\n      const isValidSignature = RazorpayService.verifyPaymentSignature(\n        razorpay_payment_id,\n        razorpay_order_id,\n        razorpay_signature\n      );\n\n      if (!isValidSignature) {\n        return res.status(400).json({ error: 'Invalid payment signature' });\n      }\n\n      // Find transaction by Razorpay order ID\n      const transaction = await Transaction.findOne({ razorpayOrderId: razorpay_order_id });\n      if (!transaction) {\n        return res.status(404).json({ error: 'Transaction not found' });\n      }\n\n      // Update transaction as completed\n      transaction.status = 'completed';\n      transaction.razorpayPaymentId = razorpay_payment_id;\n      transaction.razorpaySignature = razorpay_signature;\n      transaction.paymentMethod = 'razorpay';\n      await transaction.save();\n\n      // Add credits to user\n      await User.findByIdAndUpdate(\n        transaction.userId,\n        { $inc: { credits: transaction.credits } }\n      );\n\n      res.json({\n        success: true,\n        message: 'Payment verified successfully',\n        transaction: {\n          id: transaction.transactionId,\n          credits: transaction.credits,\n          amount: transaction.amount,\n          currency: transaction.currency\n        }\n      });\n    } catch (error) {\n      console.error('Verify payment error:', error);\n      res.status(500).json({ error: 'Failed to verify payment' });\n    }\n  }\n\n  // Handle Razorpay webhook (for automatic payment updates)\n  static async handleWebhook(req: Request, res: Response) {\n    try {\n      // Verify webhook signature for security\n      const webhookSignature = req.headers['x-razorpay-signature'] as string;\n      const webhookSecret = process.env.RAZORPAY_WEBHOOK_SECRET;\n      \n      if (webhookSecret && webhookSignature) {\n        const crypto = require('crypto');\n        const expectedSignature = crypto\n          .createHmac('sha256', webhookSecret)\n          .update(JSON.stringify(req.body))\n          .digest('hex');\n          \n        if (expectedSignature !== webhookSignature) {\n          console.error('❌ Invalid webhook signature');\n          return res.status(400).json({ error: 'Invalid signature' });\n        }\n      }\n\n      const { event, payload } = req.body;\n      console.log(`📥 Razorpay webhook received: ${event}`);\n\n      switch (event) {\n        case 'payment.captured':\n          await PaymentController.handlePaymentCaptured(payload.payment.entity);\n          break;\n        case 'payment.failed':\n          await PaymentController.handlePaymentFailed(payload.payment.entity);\n          break;\n        default:\n          console.log(`ℹ️  Unhandled webhook event: ${event}`);\n      }\n\n      res.json({ status: 'ok' });\n    } catch (error) {\n      console.error('Webhook error:', error);\n      res.status(500).json({ error: 'Webhook processing failed' });\n    }\n  }\n\n  // Handle payment captured webhook\n  private static async handlePaymentCaptured(payment: any) {\n    try {\n      const transaction = await Transaction.findOne({ \n        razorpayOrderId: payment.order_id \n      });\n\n      if (!transaction) {\n        console.warn(`⚠️  Transaction not found for order: ${payment.order_id}`);\n        return;\n      }\n\n      if (transaction.status === 'completed') {\n        console.log(`ℹ️  Transaction already completed: ${transaction.transactionId}`);\n        return;\n      }\n\n      // Update transaction\n      transaction.status = 'completed';\n      transaction.razorpayPaymentId = payment.id;\n      transaction.paymentMethod = payment.method;\n      await transaction.save();\n\n      // Add credits to user\n      await User.findByIdAndUpdate(\n        transaction.userId,\n        { $inc: { credits: transaction.credits } }\n      );\n\n      console.log(`✅ Payment captured and credits added: ${transaction.transactionId}`);\n    } catch (error) {\n      console.error('Handle payment captured error:', error);\n    }\n  }\n\n  // Handle payment failed webhook\n  private static async handlePaymentFailed(payment: any) {\n    try {\n      const transaction = await Transaction.findOne({ \n        razorpayOrderId: payment.order_id \n      });\n\n      if (!transaction) {\n        console.warn(`⚠️  Transaction not found for failed payment: ${payment.order_id}`);\n        return;\n      }\n\n      transaction.status = 'failed';\n      transaction.razorpayPaymentId = payment.id;\n      await transaction.save();\n\n      console.log(`❌ Payment failed: ${transaction.transactionId}`);\n    } catch (error) {\n      console.error('Handle payment failed error:', error);\n    }\n  }\n\n  // Get user's transaction history\n  static async getTransactionHistory(req: Request, res: Response) {\n    try {\n      const user = req.user as IUser;\n      const { page = 1, limit = 10, status } = req.query;\n\n      const filter: any = { userId: user._id };\n      if (status) {\n        filter.status = status;\n      }\n\n      const transactions = await Transaction.find(filter)\n        .sort({ createdAt: -1 })\n        .limit(Number(limit))\n        .skip((Number(page) - 1) * Number(limit))\n        .select('-razorpaySignature -razorpayPaymentId'); // Hide sensitive info\n\n      const total = await Transaction.countDocuments(filter);\n\n      res.json({\n        transactions,\n        total,\n        page: Number(page),\n        totalPages: Math.ceil(total / Number(limit))\n      });\n    } catch (error) {\n      console.error('Get transaction history error:', error);\n      res.status(500).json({ error: 'Failed to get transaction history' });\n    }\n  }\n}\n\nexport default PaymentController;","size_bytes":10516},"server/controllers/SupportController.ts":{"content":"import { Request, Response } from 'express';\nimport SupportTicket, { ISupportTicket } from '../models/SupportTicket';\nimport { IUser } from '../models/User';\n\nexport class SupportController {\n  // Create a support ticket\n  static async createTicket(req: Request, res: Response) {\n    try {\n      const user = req.user as IUser;\n      const { subject, category, message } = req.body;\n\n      const ticket = new SupportTicket({\n        userId: user._id,\n        subject,\n        category,\n        message,\n        status: 'open'\n      });\n\n      await ticket.save();\n      \n      // Populate user information\n      await ticket.populate('userId', 'username email firstName lastName');\n      \n      res.status(201).json(ticket);\n    } catch (error) {\n      console.error('Create ticket error:', error);\n      res.status(500).json({ error: 'Failed to create support ticket' });\n    }\n  }\n\n  // Get user tickets\n  static async getUserTickets(req: Request, res: Response) {\n    try {\n      const user = req.user as IUser;\n      const { page = 1, limit = 10, status } = req.query;\n\n      const filter: any = { userId: user._id };\n      if (status) {\n        filter.status = status;\n      }\n\n      const tickets = await SupportTicket.find(filter)\n        .sort({ createdAt: -1 })\n        .limit(Number(limit))\n        .skip((Number(page) - 1) * Number(limit))\n        .populate('userId', 'username email firstName lastName');\n\n      const total = await SupportTicket.countDocuments(filter);\n\n      res.json({\n        tickets,\n        total,\n        page: Number(page),\n        totalPages: Math.ceil(total / Number(limit))\n      });\n    } catch (error) {\n      console.error('Get tickets error:', error);\n      res.status(500).json({ error: 'Failed to get support tickets' });\n    }\n  }\n\n  // Get single ticket\n  static async getTicket(req: Request, res: Response) {\n    try {\n      const user = req.user as IUser;\n      const { ticketId } = req.params;\n\n      const ticket = await SupportTicket.findOne({\n        _id: ticketId,\n        userId: user._id\n      }).populate('userId', 'username email firstName lastName');\n\n      if (!ticket) {\n        return res.status(404).json({ error: 'Support ticket not found' });\n      }\n\n      res.json(ticket);\n    } catch (error) {\n      console.error('Get ticket error:', error);\n      res.status(500).json({ error: 'Failed to get support ticket' });\n    }\n  }\n\n  // Update ticket status (admin only)\n  static async updateTicketStatus(req: Request, res: Response) {\n    try {\n      const { ticketId } = req.params;\n      const { status } = req.body;\n\n      const ticket = await SupportTicket.findByIdAndUpdate(\n        ticketId,\n        { status },\n        { new: true, runValidators: true }\n      ).populate('userId', 'username email firstName lastName');\n\n      if (!ticket) {\n        return res.status(404).json({ error: 'Support ticket not found' });\n      }\n\n      res.json(ticket);\n    } catch (error) {\n      console.error('Update ticket status error:', error);\n      res.status(500).json({ error: 'Failed to update ticket status' });\n    }\n  }\n\n  // Get all tickets (admin only)\n  static async getAllTickets(req: Request, res: Response) {\n    try {\n      const { page = 1, limit = 10, status, category } = req.query;\n\n      const filter: any = {};\n      if (status) filter.status = status;\n      if (category) filter.category = category;\n\n      const tickets = await SupportTicket.find(filter)\n        .sort({ createdAt: -1 })\n        .limit(Number(limit))\n        .skip((Number(page) - 1) * Number(limit))\n        .populate('userId', 'username email firstName lastName');\n\n      const total = await SupportTicket.countDocuments(filter);\n\n      res.json({\n        tickets,\n        total,\n        page: Number(page),\n        totalPages: Math.ceil(total / Number(limit))\n      });\n    } catch (error) {\n      console.error('Get all tickets error:', error);\n      res.status(500).json({ error: 'Failed to get support tickets' });\n    }\n  }\n}\n\nexport default SupportController;","size_bytes":4013},"server/controllers/TransactionController.ts":{"content":"import { Request, Response } from 'express';\nimport Transaction, { ITransaction } from '../models/Transaction';\nimport User, { IUser } from '../models/User';\nimport mongoose from 'mongoose';\n\nexport class TransactionController {\n  // Create a new transaction\n  static async createTransaction(req: Request, res: Response) {\n    try {\n      const user = req.user as IUser;\n      const { packageName, credits, amount, currency, paymentMethod } = req.body;\n\n      const transaction = new Transaction({\n        userId: user._id,\n        transactionId: `txn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        packageName,\n        credits,\n        amount,\n        currency,\n        paymentMethod,\n        status: 'pending'\n      });\n\n      await transaction.save();\n      res.status(201).json(transaction);\n    } catch (error) {\n      console.error('Create transaction error:', error);\n      res.status(500).json({ error: 'Failed to create transaction' });\n    }\n  }\n\n  // Get user transactions\n  static async getUserTransactions(req: Request, res: Response) {\n    try {\n      const user = req.user as IUser;\n      const { page = 1, limit = 10, status } = req.query;\n\n      const filter: any = { userId: user._id };\n      if (status) {\n        filter.status = status;\n      }\n\n      const transactions = await Transaction.find(filter)\n        .sort({ createdAt: -1 })\n        .limit(Number(limit))\n        .skip((Number(page) - 1) * Number(limit));\n\n      const total = await Transaction.countDocuments(filter);\n\n      res.json({\n        transactions,\n        total,\n        page: Number(page),\n        totalPages: Math.ceil(total / Number(limit))\n      });\n    } catch (error) {\n      console.error('Get transactions error:', error);\n      res.status(500).json({ error: 'Failed to get transactions' });\n    }\n  }\n\n  // Update transaction status\n  static async updateTransactionStatus(req: Request, res: Response) {\n    try {\n      const { transactionId } = req.params;\n      const { status, razorpayPaymentId } = req.body;\n\n      const transaction = await Transaction.findOne({ transactionId });\n      if (!transaction) {\n        return res.status(404).json({ error: 'Transaction not found' });\n      }\n\n      const updateData: any = { status };\n      if (razorpayPaymentId) {\n        updateData.razorpayPaymentId = razorpayPaymentId;\n      }\n\n      // If transaction is completed, add credits to user\n      if (status === 'completed' && transaction.status !== 'completed') {\n        await User.findByIdAndUpdate(\n          transaction.userId,\n          { $inc: { credits: transaction.credits } }\n        );\n      }\n\n      const updatedTransaction = await Transaction.findOneAndUpdate(\n        { transactionId },\n        updateData,\n        { new: true }\n      );\n\n      res.json(updatedTransaction);\n    } catch (error) {\n      console.error('Update transaction error:', error);\n      res.status(500).json({ error: 'Failed to update transaction' });\n    }\n  }\n\n  // Process payment (webhook simulation)\n  static async processPayment(req: Request, res: Response) {\n    try {\n      const { transactionId, paymentId, status } = req.body;\n\n      const transaction = await Transaction.findOneAndUpdate(\n        { transactionId },\n        { \n          status: status === 'success' ? 'completed' : 'failed',\n          razorpayPaymentId: paymentId \n        },\n        { new: true }\n      );\n\n      if (!transaction) {\n        return res.status(404).json({ error: 'Transaction not found' });\n      }\n\n      // Add credits if payment successful\n      if (status === 'success') {\n        await User.findByIdAndUpdate(\n          transaction.userId,\n          { $inc: { credits: transaction.credits } }\n        );\n      }\n\n      res.json({ message: 'Payment processed', transaction });\n    } catch (error) {\n      console.error('Process payment error:', error);\n      res.status(500).json({ error: 'Failed to process payment' });\n    }\n  }\n}\n\nexport default TransactionController;","size_bytes":3978},"server/controllers/UserController.ts":{"content":"import { Request, Response } from 'express';\nimport User, { IUser } from '../models/User';\nimport UserSettings from '../models/UserSettings';\nimport bcrypt from 'bcryptjs';\n\nexport class UserController {\n  // Get user profile\n  static async getProfile(req: Request, res: Response) {\n    try {\n      const user = req.user as IUser;\n      const profile = await User.findById(user._id).select('-password');\n      \n      if (!profile) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n\n      res.json(profile);\n    } catch (error) {\n      console.error('Get profile error:', error);\n      res.status(500).json({ error: 'Failed to get profile' });\n    }\n  }\n\n  // Update user profile\n  static async updateProfile(req: Request, res: Response) {\n    try {\n      const user = req.user as IUser;\n      const { firstName, lastName, phone, company, avatar } = req.body;\n\n      const updatedUser = await User.findByIdAndUpdate(\n        user._id,\n        { firstName, lastName, phone, company, avatar },\n        { new: true, runValidators: true }\n      ).select('-password');\n\n      if (!updatedUser) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n\n      res.json(updatedUser);\n    } catch (error) {\n      console.error('Update profile error:', error);\n      res.status(500).json({ error: 'Failed to update profile' });\n    }\n  }\n\n  // Update password\n  static async updatePassword(req: Request, res: Response) {\n    try {\n      const user = req.user as IUser;\n      const { currentPassword, newPassword } = req.body;\n\n      // Get user with password\n      const userWithPassword = await User.findById(user._id);\n      if (!userWithPassword) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n\n      // Verify current password\n      const isValidPassword = await userWithPassword.comparePassword(currentPassword);\n      if (!isValidPassword) {\n        return res.status(400).json({ error: 'Current password is incorrect' });\n      }\n\n      // Update password\n      userWithPassword.password = newPassword;\n      await userWithPassword.save();\n\n      res.json({ message: 'Password updated successfully' });\n    } catch (error) {\n      console.error('Update password error:', error);\n      res.status(500).json({ error: 'Failed to update password' });\n    }\n  }\n\n  // Delete account\n  static async deleteAccount(req: Request, res: Response) {\n    try {\n      const user = req.user as IUser;\n\n      // Delete user settings\n      await UserSettings.findOneAndDelete({ userId: user._id });\n      \n      // Delete user\n      await User.findByIdAndDelete(user._id);\n\n      // Logout user\n      req.logOut((err) => {\n        if (err) {\n          console.error('Logout error during account deletion:', err);\n        }\n      });\n\n      res.json({ message: 'Account deleted successfully' });\n    } catch (error) {\n      console.error('Delete account error:', error);\n      res.status(500).json({ error: 'Failed to delete account' });\n    }\n  }\n\n  // Get user settings\n  static async getSettings(req: Request, res: Response) {\n    try {\n      const user = req.user as IUser;\n      let settings = await UserSettings.findOne({ userId: user._id });\n\n      // Create default settings if not exist\n      if (!settings) {\n        settings = new UserSettings({ userId: user._id });\n        await settings.save();\n      }\n\n      res.json(settings);\n    } catch (error) {\n      console.error('Get settings error:', error);\n      res.status(500).json({ error: 'Failed to get settings' });\n    }\n  }\n\n  // Update user settings\n  static async updateSettings(req: Request, res: Response) {\n    try {\n      const user = req.user as IUser;\n      const settingsData = req.body;\n\n      const settings = await UserSettings.findOneAndUpdate(\n        { userId: user._id },\n        settingsData,\n        { new: true, upsert: true, runValidators: true }\n      );\n\n      res.json(settings);\n    } catch (error) {\n      console.error('Update settings error:', error);\n      res.status(500).json({ error: 'Failed to update settings' });\n    }\n  }\n}\n\nexport default UserController;","size_bytes":4110},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\n\n// Middleware to require authentication\nexport const requireAuth = (req: Request, res: Response, next: NextFunction) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  \n  return res.status(401).json({ error: 'Authentication required' });\n};\n\n// Middleware to require admin role (for future use)\nexport const requireAdmin = (req: Request, res: Response, next: NextFunction) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n  \n  // Add admin role check here when user roles are implemented\n  next();\n};\n\nexport default { requireAuth, requireAdmin };","size_bytes":680},"server/models/ApiUsage.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\n\nexport interface IApiUsage extends Document {\n  _id: string;\n  userId: mongoose.Types.ObjectId;\n  endpoint: string;\n  method: string;\n  creditsUsed: number;\n  success: boolean;\n  createdAt: Date;\n}\n\nconst apiUsageSchema = new Schema<IApiUsage>({\n  userId: {\n    type: Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  endpoint: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  method: {\n    type: String,\n    required: true,\n    enum: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH']\n  },\n  creditsUsed: {\n    type: Number,\n    required: true,\n    min: 0\n  },\n  success: {\n    type: Boolean,\n    required: true\n  }\n}, {\n  timestamps: { updatedAt: false }\n});\n\n// Index for faster queries\napiUsageSchema.index({ userId: 1, createdAt: -1 });\napiUsageSchema.index({ endpoint: 1 });\n\nexport default mongoose.model<IApiUsage>('ApiUsage', apiUsageSchema);","size_bytes":927},"server/models/SupportTicket.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\n\nexport interface ISupportTicket extends Document {\n  _id: string;\n  userId: mongoose.Types.ObjectId;\n  subject: string;\n  category: string;\n  message: string;\n  status: 'open' | 'in_progress' | 'resolved' | 'closed';\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst supportTicketSchema = new Schema<ISupportTicket>({\n  userId: {\n    type: Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  subject: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 200\n  },\n  category: {\n    type: String,\n    required: true,\n    trim: true,\n    enum: ['technical', 'billing', 'feature-request', 'bug-report', 'general']\n  },\n  message: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 2000\n  },\n  status: {\n    type: String,\n    enum: ['open', 'in_progress', 'resolved', 'closed'],\n    default: 'open'\n  }\n}, {\n  timestamps: true\n});\n\n// Index for faster queries\nsupportTicketSchema.index({ userId: 1, createdAt: -1 });\nsupportTicketSchema.index({ status: 1 });\n\nexport default mongoose.model<ISupportTicket>('SupportTicket', supportTicketSchema);","size_bytes":1144},"server/models/Transaction.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\n\nexport interface ITransaction extends Document {\n  _id: string;\n  userId: mongoose.Types.ObjectId;\n  transactionId: string;\n  packageName: string;\n  credits: number;\n  amount: number;\n  originalAmount: number; // Amount before tax\n  currency: 'USD' | 'INR';\n  billingCountry: string;\n  taxApplied: boolean;\n  taxRate: number;\n  taxAmount: number;\n  status: 'completed' | 'pending' | 'failed';\n  paymentMethod?: string;\n  razorpayOrderId?: string;\n  razorpayPaymentId?: string;\n  razorpaySignature?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst transactionSchema = new Schema<ITransaction>({\n  userId: {\n    type: Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  transactionId: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  packageName: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  credits: {\n    type: Number,\n    required: true,\n    min: 0\n  },\n  amount: {\n    type: Number,\n    required: true,\n    min: 0\n  },\n  originalAmount: {\n    type: Number,\n    required: true,\n    min: 0\n  },\n  currency: {\n    type: String,\n    required: true,\n    enum: ['USD', 'INR'],\n    default: 'USD'\n  },\n  billingCountry: {\n    type: String,\n    required: true,\n    trim: true,\n    uppercase: true,\n    maxlength: 2\n  },\n  taxApplied: {\n    type: Boolean,\n    default: false\n  },\n  taxRate: {\n    type: Number,\n    default: 0,\n    min: 0,\n    max: 1\n  },\n  taxAmount: {\n    type: Number,\n    default: 0,\n    min: 0\n  },\n  status: {\n    type: String,\n    required: true,\n    enum: ['completed', 'pending', 'failed'],\n    default: 'pending'\n  },\n  paymentMethod: {\n    type: String,\n    trim: true\n  },\n  razorpayOrderId: {\n    type: String,\n    trim: true\n  },\n  razorpayPaymentId: {\n    type: String,\n    trim: true\n  },\n  razorpaySignature: {\n    type: String,\n    trim: true\n  }\n}, {\n  timestamps: true\n});\n\n// Index for faster queries\ntransactionSchema.index({ userId: 1, createdAt: -1 });\ntransactionSchema.index({ status: 1 });\n// transactionId already has unique index from field definition, no need for separate index\n\nexport default mongoose.model<ITransaction>('Transaction', transactionSchema);","size_bytes":2206},"server/models/User.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\nimport bcrypt from 'bcryptjs';\n\nexport interface IUser extends Document {\n  _id: string;\n  username: string;\n  email: string;\n  password: string;\n  firstName?: string;\n  lastName?: string;\n  phone?: string;\n  company?: string;\n  avatar?: string;\n  credits: number;\n  apiKey?: string;\n  isEmailVerified: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n  comparePassword(candidatePassword: string): Promise<boolean>;\n}\n\nconst userSchema = new Schema<IUser>({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    minlength: 3,\n    maxlength: 30\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true,\n    trim: true\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 6\n  },\n  firstName: {\n    type: String,\n    trim: true,\n    maxlength: 50\n  },\n  lastName: {\n    type: String,\n    trim: true,\n    maxlength: 50\n  },\n  phone: {\n    type: String,\n    trim: true\n  },\n  company: {\n    type: String,\n    trim: true,\n    maxlength: 100\n  },\n  avatar: {\n    type: String,\n    trim: true\n  },\n  credits: {\n    type: Number,\n    default: 0,\n    min: 0\n  },\n  apiKey: {\n    type: String,\n    trim: true\n  },\n  isEmailVerified: {\n    type: Boolean,\n    default: false\n  }\n}, {\n  timestamps: true\n});\n\n// Pre-save middleware to hash password\nuserSchema.pre('save', async function(next) {\n  if (!this.isModified('password')) return next();\n  \n  try {\n    const salt = await bcrypt.genSalt(10);\n    this.password = await bcrypt.hash(this.password, salt);\n    next();\n  } catch (error) {\n    next(error as Error);\n  }\n});\n\n// Method to compare password\nuserSchema.methods.comparePassword = async function(candidatePassword: string): Promise<boolean> {\n  return bcrypt.compare(candidatePassword, this.password);\n};\n\nexport default mongoose.model<IUser>('User', userSchema);","size_bytes":1905},"server/models/UserSettings.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\n\nexport interface IUserSettings extends Document {\n  _id: string;\n  userId: mongoose.Types.ObjectId;\n  theme: 'light' | 'dark' | 'system';\n  language: string;\n  emailNotifications: boolean;\n  pushNotifications: boolean;\n  creditAlerts: boolean;\n  dataAnalytics: boolean;\n  marketingCommunications: boolean;\n  rateLimit: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst userSettingsSchema = new Schema<IUserSettings>({\n  userId: {\n    type: Schema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n    unique: true\n  },\n  theme: {\n    type: String,\n    enum: ['light', 'dark', 'system'],\n    default: 'system'\n  },\n  language: {\n    type: String,\n    default: 'en'\n  },\n  emailNotifications: {\n    type: Boolean,\n    default: true\n  },\n  pushNotifications: {\n    type: Boolean,\n    default: false\n  },\n  creditAlerts: {\n    type: Boolean,\n    default: true\n  },\n  dataAnalytics: {\n    type: Boolean,\n    default: true\n  },\n  marketingCommunications: {\n    type: Boolean,\n    default: false\n  },\n  rateLimit: {\n    type: Number,\n    default: 100,\n    min: 1\n  }\n}, {\n  timestamps: true\n});\n\nexport default mongoose.model<IUserSettings>('UserSettings', userSettingsSchema);","size_bytes":1234},"server/routes/authRoutes.ts":{"content":"import { Router } from 'express';\nimport { AuthController } from '../controllers/AuthController';\n\nconst router = Router();\n\n// Authentication routes\nrouter.post('/register', AuthController.register);\nrouter.post('/login', AuthController.login);\nrouter.post('/logout', AuthController.logout);\nrouter.get('/user', AuthController.getCurrentUser);\n\nexport default router;","size_bytes":368},"server/routes/paymentRoutes.ts":{"content":"import express, { Router } from 'express';\nimport { PaymentController } from '../controllers/PaymentController';\nimport { requireAuth } from '../middleware/auth';\n\nconst router = Router();\n\n// Public routes (no auth required)\nrouter.get('/packages', PaymentController.getPackages);\nrouter.post('/webhook', express.raw({ type: 'application/json' }), PaymentController.handleWebhook); // Razorpay webhook\n\n// Protected routes (require authentication)\nrouter.use(requireAuth);\n\nrouter.post('/create-order', PaymentController.createOrder);\nrouter.post('/verify', PaymentController.verifyPayment);\nrouter.get('/history', PaymentController.getTransactionHistory);\n\nexport default router;","size_bytes":681},"server/routes/supportRoutes.ts":{"content":"import { Router } from 'express';\nimport { SupportController } from '../controllers/SupportController';\nimport { requireAuth, requireAdmin } from '../middleware/auth';\n\nconst router = Router();\n\n// All support routes require authentication\nrouter.use(requireAuth);\n\n// User support ticket routes\nrouter.post('/', SupportController.createTicket);\nrouter.get('/', SupportController.getUserTickets);\nrouter.get('/:ticketId', SupportController.getTicket);\n\n// Admin routes\nrouter.get('/admin/tickets', requireAdmin, SupportController.getAllTickets);\nrouter.put('/admin/:ticketId/status', requireAdmin, SupportController.updateTicketStatus);\n\nexport default router;","size_bytes":660},"server/routes/transactionRoutes.ts":{"content":"import { Router } from 'express';\nimport { TransactionController } from '../controllers/TransactionController';\nimport { requireAuth } from '../middleware/auth';\n\nconst router = Router();\n\n// All transaction routes require authentication\nrouter.use(requireAuth);\n\n// Transaction routes\nrouter.post('/', TransactionController.createTransaction);\nrouter.get('/', TransactionController.getUserTransactions);\nrouter.put('/:transactionId/status', TransactionController.updateTransactionStatus);\nrouter.post('/webhook/payment', TransactionController.processPayment);\n\nexport default router;","size_bytes":584},"server/routes/userRoutes.ts":{"content":"import { Router } from 'express';\nimport { UserController } from '../controllers/UserController';\nimport { requireAuth } from '../middleware/auth';\n\nconst router = Router();\n\n// All user routes require authentication\nrouter.use(requireAuth);\n\n// User profile routes\nrouter.get('/profile', UserController.getProfile);\nrouter.put('/profile', UserController.updateProfile);\nrouter.put('/password', UserController.updatePassword);\nrouter.delete('/profile', UserController.deleteAccount);\n\n// User settings routes\nrouter.get('/settings', UserController.getSettings);\nrouter.put('/settings', UserController.updateSettings);\n\nexport default router;","size_bytes":641},"server/services/RazorpayService.ts":{"content":"import Razorpay from 'razorpay';\nimport crypto from 'crypto';\nimport { config } from '../config/environment';\n\n// Type definitions for Razorpay (since @types/razorpay doesn't exist)\ninterface RazorpayOrder {\n  id: string;\n  amount: number;\n  currency: string;\n  receipt: string;\n  status: string;\n}\n\ninterface RazorpayPayment {\n  id: string;\n  amount: number;\n  currency: string;\n  status: string;\n  order_id: string;\n  method: string;\n}\n\ninterface CreateOrderOptions {\n  amount: number;\n  currency: 'INR' | 'USD';\n  receipt: string;\n  billingCountry: string;\n}\n\nexport class RazorpayService {\n  private razorpay: any;\n\n  constructor() {\n    if (!config.razorpayKeyId || !config.razorpayKeySecret) {\n      console.warn('⚠️  Razorpay credentials not configured. Payment features will be disabled.');\n      return;\n    }\n\n    this.razorpay = new Razorpay({\n      key_id: config.razorpayKeyId,\n      key_secret: config.razorpayKeySecret,\n    });\n  }\n\n  // Create order with appropriate currency based on billing country\n  async createOrder(options: CreateOrderOptions): Promise<RazorpayOrder> {\n    if (!this.razorpay) {\n      throw new Error('Razorpay not configured. Please set RAZORPAY_KEY_ID and RAZORPAY_KEY_SECRET.');\n    }\n\n    // Determine currency based on billing country\n    const currency = this.getCurrencyByCountry(options.billingCountry);\n    \n    // Calculate amount with taxes if applicable\n    const finalAmount = this.calculateAmountWithTax(options.amount, options.billingCountry);\n\n    const orderOptions = {\n      amount: Math.round(finalAmount * 100), // Amount in smallest currency unit (paise for INR, cents for USD)\n      currency,\n      receipt: options.receipt,\n      notes: {\n        billing_country: options.billingCountry,\n        original_amount: options.amount,\n        tax_applied: finalAmount !== options.amount\n      }\n    };\n\n    try {\n      const order = await this.razorpay.orders.create(orderOptions);\n      console.log(`✅ Razorpay order created: ${order.id} for ${currency} ${finalAmount}`);\n      return order;\n    } catch (error: any) {\n      console.error('❌ Razorpay order creation failed:', error);\n      throw new Error(`Failed to create Razorpay order: ${error.message}`);\n    }\n  }\n\n  // Verify payment signature for security\n  verifyPaymentSignature(paymentId: string, orderId: string, signature: string): boolean {\n    if (!config.razorpayKeySecret) {\n      throw new Error('Razorpay key secret not configured');\n    }\n\n    const body = `${orderId}|${paymentId}`;\n    const expectedSignature = crypto\n      .createHmac('sha256', config.razorpayKeySecret)\n      .update(body)\n      .digest('hex');\n\n    return expectedSignature === signature;\n  }\n\n  // Get currency based on billing country\n  private getCurrencyByCountry(billingCountry: string): 'INR' | 'USD' {\n    const country = billingCountry.toUpperCase();\n    \n    // India uses INR\n    if (country === 'IN' || country === 'INDIA') {\n      return 'INR';\n    }\n    \n    // All other countries use USD\n    return 'USD';\n  }\n\n  // Calculate amount with tax (GST for India)\n  private calculateAmountWithTax(amount: number, billingCountry: string): number {\n    const country = billingCountry.toUpperCase();\n    \n    // Add 18% GST for Indian customers\n    if (country === 'IN' || country === 'INDIA') {\n      return amount * 1.18; // 18% GST\n    }\n    \n    // No tax for international customers\n    return amount;\n  }\n\n  // Get supported currencies\n  getSupportedCurrencies(): Array<{ code: string; symbol: string; name: string }> {\n    return [\n      { code: 'INR', symbol: '₹', name: 'Indian Rupee' },\n      { code: 'USD', symbol: '$', name: 'US Dollar' }\n    ];\n  }\n\n  // Get tax info for country\n  getTaxInfo(billingCountry: string): { rate: number; name: string; applicable: boolean } {\n    const country = billingCountry.toUpperCase();\n    \n    if (country === 'IN' || country === 'INDIA') {\n      return {\n        rate: 0.18,\n        name: 'GST',\n        applicable: true\n      };\n    }\n    \n    return {\n      rate: 0,\n      name: 'No Tax',\n      applicable: false\n    };\n  }\n\n  // Format amount with currency symbol\n  formatAmount(amount: number, currency: 'INR' | 'USD'): string {\n    const symbols = { INR: '₹', USD: '$' };\n    return `${symbols[currency]}${amount.toFixed(2)}`;\n  }\n\n  // Detect country by IP (basic implementation)\n  static detectCountryByIP(ip: string): string {\n    // This is a basic implementation - in production, use a proper IP geolocation service\n    // For now, return a default country\n    return 'US'; // Default to US\n  }\n}\n\nexport default new RazorpayService();","size_bytes":4614},"client/src/components/custom-form.tsx":{"content":"import { useState, forwardRef, InputHTMLAttributes, ButtonHTMLAttributes, LabelHTMLAttributes } from \"react\";\n\n// Custom Input Component\ninterface CustomInputProps extends InputHTMLAttributes<HTMLInputElement> {\n  error?: string;\n  label?: string;\n}\n\nexport const CustomInput = forwardRef<HTMLInputElement, CustomInputProps>(\n  ({ className = \"\", error, label, id, ...props }, ref) => {\n    const inputId = id || `input-${Date.now()}-${Math.random()}`;\n    \n    return (\n      <div className=\"w-full\">\n        {label && (\n          <label \n            htmlFor={inputId}\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\"\n          >\n            {label}\n          </label>\n        )}\n        <input\n          ref={ref}\n          id={inputId}\n          className={`\n            w-full px-3 py-2 border rounded-md shadow-sm\n            ${error \n              ? 'border-red-500 focus:border-red-500 focus:ring-red-500' \n              : 'border-gray-300 dark:border-gray-600 focus:border-blue-500 focus:ring-blue-500'\n            }\n            bg-white dark:bg-gray-800 \n            text-gray-900 dark:text-gray-100\n            placeholder-gray-500 dark:placeholder-gray-400\n            focus:outline-none focus:ring-2 focus:ring-opacity-50\n            disabled:opacity-50 disabled:cursor-not-allowed\n            ${className}\n          `}\n          {...props}\n        />\n        {error && (\n          <p className=\"mt-1 text-sm text-red-600 dark:text-red-400\">\n            {error}\n          </p>\n        )}\n      </div>\n    );\n  }\n);\n\nCustomInput.displayName = \"CustomInput\";\n\n// Custom Button Component\ninterface CustomButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';\n  size?: 'sm' | 'md' | 'lg';\n  loading?: boolean;\n}\n\nexport const CustomButton = forwardRef<HTMLButtonElement, CustomButtonProps>(\n  ({ className = \"\", variant = 'primary', size = 'md', loading = false, children, disabled, ...props }, ref) => {\n    const baseClasses = \"inline-flex items-center justify-center font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed\";\n    \n    const variantClasses = {\n      primary: \"bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500\",\n      secondary: \"bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500\", \n      outline: \"border border-gray-300 dark:border-gray-600 bg-transparent text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800 focus:ring-blue-500\",\n      ghost: \"bg-transparent text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 focus:ring-gray-500\"\n    };\n    \n    const sizeClasses = {\n      sm: \"px-3 py-1.5 text-sm\",\n      md: \"px-4 py-2 text-sm\",\n      lg: \"px-6 py-3 text-base\"\n    };\n    \n    return (\n      <button\n        ref={ref}\n        className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`}\n        disabled={disabled || loading}\n        {...props}\n      >\n        {loading && (\n          <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-current\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n          </svg>\n        )}\n        {children}\n      </button>\n    );\n  }\n);\n\nCustomButton.displayName = \"CustomButton\";\n\n// Custom Label Component\ninterface CustomLabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\n  required?: boolean;\n}\n\nexport const CustomLabel = forwardRef<HTMLLabelElement, CustomLabelProps>(\n  ({ className = \"\", children, required, ...props }, ref) => {\n    return (\n      <label\n        ref={ref}\n        className={`block text-sm font-medium text-gray-700 dark:text-gray-300 ${className}`}\n        {...props}\n      >\n        {children}\n        {required && <span className=\"text-red-500 ml-1\">*</span>}\n      </label>\n    );\n  }\n);\n\nCustomLabel.displayName = \"CustomLabel\";\n\n// Custom Form Component\ninterface CustomFormProps {\n  onSubmit: (e: React.FormEvent) => void;\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const CustomForm = ({ onSubmit, children, className = \"\" }: CustomFormProps) => {\n  return (\n    <form onSubmit={onSubmit} className={`space-y-4 ${className}`}>\n      {children}\n    </form>\n  );\n};\n\n// Custom Checkbox Component\ninterface CustomCheckboxProps extends InputHTMLAttributes<HTMLInputElement> {\n  label?: string;\n}\n\nexport const CustomCheckbox = forwardRef<HTMLInputElement, CustomCheckboxProps>(\n  ({ className = \"\", label, id, ...props }, ref) => {\n    const checkboxId = id || `checkbox-${Date.now()}-${Math.random()}`;\n    \n    return (\n      <div className=\"flex items-center\">\n        <input\n          ref={ref}\n          type=\"checkbox\"\n          id={checkboxId}\n          className={`\n            h-4 w-4 text-blue-600 border-gray-300 dark:border-gray-600 rounded\n            focus:ring-blue-500 focus:ring-2 focus:ring-offset-0\n            bg-white dark:bg-gray-800\n            ${className}\n          `}\n          {...props}\n        />\n        {label && (\n          <label \n            htmlFor={checkboxId}\n            className=\"ml-2 block text-sm text-gray-700 dark:text-gray-300\"\n          >\n            {label}\n          </label>\n        )}\n      </div>\n    );\n  }\n);\n\nCustomCheckbox.displayName = \"CustomCheckbox\";","size_bytes":5635},"client/src/components/navbar.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/hooks/use-theme\";\n\nexport default function Navbar() {\n  const { theme, setTheme } = useTheme();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <nav className=\"border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-16\">\n          <div className=\"flex items-center\">\n            <Link href=\"/\">\n              <div className=\"flex-shrink-0 font-heading font-bold text-xl cursor-pointer\">\n                <span className=\"text-primary\">AI</span>SAAS\n              </div>\n            </Link>\n            <div className=\"hidden md:ml-6 md:flex md:space-x-8\">\n              <a\n                href=\"#features\"\n                className=\"text-muted-foreground hover:text-primary px-3 py-2 text-sm font-medium transition-colors\"\n              >\n                Features\n              </a>\n              <a\n                href=\"#pricing\"\n                className=\"text-muted-foreground hover:text-primary px-3 py-2 text-sm font-medium transition-colors\"\n              >\n                Pricing\n              </a>\n              <a\n                href=\"#testimonials\"\n                className=\"text-muted-foreground hover:text-primary px-3 py-2 text-sm font-medium transition-colors\"\n              >\n                Testimonials\n              </a>\n              <a\n                href=\"#contact\"\n                className=\"text-muted-foreground hover:text-primary px-3 py-2 text-sm font-medium transition-colors\"\n              >\n                Contact\n              </a>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={toggleTheme}\n              data-testid=\"button-theme-toggle\"\n            >\n              <span className=\"material-symbols-outlined\">\n                {theme === \"light\" ? \"dark_mode\" : \"light_mode\"}\n              </span>\n            </Button>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Link href=\"/auth\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-sign-in\">\n                  Sign In\n                </Button>\n              </Link>\n              <Link href=\"/auth\">\n                <Button size=\"sm\" data-testid=\"button-get-started\">\n                  Get Started\n                </Button>\n              </Link>\n            </div>\n            \n            {/* Mobile menu button */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"md:hidden\"\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              <span className=\"material-symbols-outlined\">menu</span>\n            </Button>\n          </div>\n        </div>\n        \n        {/* Mobile menu */}\n        {mobileMenuOpen && (\n          <div className=\"md:hidden border-t border-border\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1\">\n              <a\n                href=\"#features\"\n                className=\"block px-3 py-2 text-base font-medium text-muted-foreground hover:text-primary\"\n              >\n                Features\n              </a>\n              <a\n                href=\"#pricing\"\n                className=\"block px-3 py-2 text-base font-medium text-muted-foreground hover:text-primary\"\n              >\n                Pricing\n              </a>\n              <a\n                href=\"#testimonials\"\n                className=\"block px-3 py-2 text-base font-medium text-muted-foreground hover:text-primary\"\n              >\n                Testimonials\n              </a>\n              <a\n                href=\"#contact\"\n                className=\"block px-3 py-2 text-base font-medium text-muted-foreground hover:text-primary\"\n              >\n                Contact\n              </a>\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":4345},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SidebarProps {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n}\n\nconst navigation = [\n  { name: \"AI Assistant\", href: \"/app\", icon: \"smart_toy\" },\n  { name: \"Dashboard\", href: \"/dashboard\", icon: \"dashboard\" },\n  { name: \"Buy Credits\", href: \"/buy-credits\", icon: \"account_balance_wallet\" },\n  { name: \"Profile\", href: \"/profile\", icon: \"person\" },\n  { name: \"Payment History\", href: \"/payments\", icon: \"receipt_long\" },\n  { name: \"Settings\", href: \"/settings\", icon: \"settings\" },\n  { name: \"Help & Support\", href: \"/support\", icon: \"help\" },\n];\n\nfunction SidebarContent({ onNavigate }: { onNavigate?: () => void }) {\n  const [location] = useLocation();\n  const { logoutMutation } = useAuth();\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n    onNavigate?.();\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"flex items-center justify-center h-16 px-6 border-b border-border\">\n        <div className=\"font-heading font-bold text-xl\">\n          <span className=\"text-primary\">AI</span>SAAS\n        </div>\n      </div>\n      \n      <nav className=\"flex-1 mt-6 px-3\">\n        <div className=\"space-y-1\">\n          {navigation.map((item) => {\n            const isActive = location === item.href || (item.href === \"/app\" && location === \"/\");\n            return (\n              <Link key={item.name} href={item.href}>\n                <Button\n                  variant=\"ghost\"\n                  className={cn(\n                    \"w-full justify-start\",\n                    isActive\n                      ? \"bg-accent text-accent-foreground\"\n                      : \"text-muted-foreground hover:text-foreground hover:bg-accent\"\n                  )}\n                  onClick={onNavigate}\n                  data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <span className=\"material-symbols-outlined mr-3\">{item.icon}</span>\n                  {item.name}\n                </Button>\n              </Link>\n            );\n          })}\n        </div>\n        \n        <div className=\"mt-8 pt-6 border-t border-border\">\n          <Button\n            variant=\"ghost\"\n            className=\"w-full justify-start text-muted-foreground hover:text-foreground hover:bg-accent\"\n            onClick={handleLogout}\n            disabled={logoutMutation.isPending}\n            data-testid=\"button-logout\"\n          >\n            <span className=\"material-symbols-outlined mr-3\">logout</span>\n            {logoutMutation.isPending ? \"Signing out...\" : \"Sign Out\"}\n          </Button>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\nexport default function Sidebar({ open, setOpen }: SidebarProps) {\n  return (\n    <>\n      {/* Desktop Sidebar */}\n      <div className=\"hidden lg:fixed lg:inset-y-0 lg:flex lg:w-64 lg:flex-col\">\n        <div className=\"flex flex-col flex-grow bg-card border-r border-border\">\n          <SidebarContent />\n        </div>\n      </div>\n\n      {/* Mobile Sidebar */}\n      <Sheet open={open} onOpenChange={setOpen}>\n        <SheetContent side=\"left\" className=\"p-0 w-64\">\n          <div className=\"flex flex-col h-full bg-card\">\n            <div className=\"flex items-center justify-between h-16 px-6 border-b border-border\">\n              <div className=\"font-heading font-bold text-xl\">\n                <span className=\"text-primary\">AI</span>SAAS\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setOpen(false)}\n                data-testid=\"button-close-sidebar\"\n              >\n                <span className=\"material-symbols-outlined\">close</span>\n              </Button>\n            </div>\n            <SidebarContent onNavigate={() => setOpen(false)} />\n          </div>\n        </SheetContent>\n      </Sheet>\n    </>\n  );\n}\n","size_bytes":4087},"client/src/components/theme-provider.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { ThemeProviderContext } from \"@/hooks/use-theme\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"ui-theme\",\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n","size_bytes":1150},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2832},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-theme.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(\n  undefined\n);\n\nexport function useTheme() {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n}\n\nexport { ThemeProviderContext };\n","size_bytes":539},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Component />\n}\n","size_bytes":675},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/app-page.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Navbar from \"@/components/navbar\";\nimport Sidebar from \"@/components/sidebar\";\n\nexport default function AppPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [messages, setMessages] = useState<any[]>([]);\n  const [inputMessage, setInputMessage] = useState('');\n\n  // Load chat history\n  const { data: chatHistory, isLoading: historyLoading } = useQuery({\n    queryKey: [\"/api/chat/history\"],\n  });\n\n  // Initialize messages with history + welcome message\n  useEffect(() => {\n    if (chatHistory && chatHistory.length > 0) {\n      setMessages(chatHistory.map((msg: any) => ({\n        role: msg.role,\n        content: msg.content,\n        timestamp: new Date(msg.createdAt),\n        creditsUsed: msg.creditsUsed\n      })));\n    } else {\n      setMessages([\n        {\n          role: 'assistant',\n          content: 'Hello! I\\'m your AI assistant. How can I help you today?',\n          timestamp: new Date()\n        }\n      ]);\n    }\n  }, [chatHistory]);\n\n  // Chat mutation\n  const chatMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const res = await apiRequest(\"POST\", \"/api/chat\", { message });\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      // Add AI response to messages\n      setMessages(prev => [...prev, {\n        role: 'assistant',\n        content: data.message,\n        timestamp: new Date(),\n        creditsUsed: data.creditsUsed\n      }]);\n      \n      // Update user credits in cache\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      \n      // Show success toast\n      toast({\n        title: \"Message sent\",\n        description: `Used ${data.creditsUsed} credit(s). ${data.remainingCredits} remaining.`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = async () => {\n    if (!inputMessage.trim() || chatMutation.isPending) return;\n    \n    const userMessage = {\n      role: 'user' as const,\n      content: inputMessage,\n      timestamp: new Date()\n    };\n    \n    // Add user message immediately\n    setMessages(prev => [...prev, userMessage]);\n    const messageContent = inputMessage;\n    setInputMessage('');\n    \n    // Send to AI API\n    chatMutation.mutate(messageContent);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      <div className=\"flex\">\n        <Sidebar open={sidebarOpen} setOpen={setSidebarOpen} />\n        <main className=\"flex-1 flex flex-col\">\n          <div className=\"border-b p-4 bg-background\">\n            <div className=\"max-w-4xl mx-auto flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold\" data-testid=\"text-chat-title\">\n                  AI Assistant\n                </h1>\n                <p className=\"text-sm text-muted-foreground\">\n                  Chat with your AI-powered assistant\n                </p>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <Badge variant=\"secondary\" className=\"text-sm\">\n                  {user?.credits || 0} Credits\n                </Badge>\n                <Link href=\"/buy-credits\">\n                  <Button size=\"sm\" data-testid=\"button-buy-credits\">\n                    <span className=\"material-symbols-outlined mr-1 text-sm\">add</span>\n                    Buy Credits\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex-1 flex flex-col max-w-4xl mx-auto w-full\">\n            {/* Chat Messages */}\n            <ScrollArea className=\"flex-1 p-4\">\n              <div className=\"space-y-4\">\n                {messages.map((message, index) => (\n                  <div\n                    key={index}\n                    className={`flex ${\n                      message.role === 'user' ? 'justify-end' : 'justify-start'\n                    }`}\n                  >\n                    <div\n                      className={`max-w-[80%] md:max-w-[60%] rounded-lg px-4 py-2 ${\n                        message.role === 'user'\n                          ? 'bg-primary text-primary-foreground'\n                          : 'bg-muted'\n                      }`}\n                      data-testid={`message-${message.role}-${index}`}\n                    >\n                      <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                      <p className=\"text-xs opacity-70 mt-1\">\n                        {message.timestamp.toLocaleTimeString()}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n                {chatMutation.isPending && (\n                  <div className=\"flex justify-start\">\n                    <div className=\"bg-muted rounded-lg px-4 py-2 max-w-[60%]\">\n                      <div className=\"flex items-center space-x-1\">\n                        <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\"></div>\n                        <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                        <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </ScrollArea>\n\n            {/* Chat Input */}\n            <div className=\"border-t p-4 bg-background\">\n              <div className=\"flex space-x-2\">\n                <Textarea\n                  placeholder=\"Type your message here...\"\n                  value={inputMessage}\n                  onChange={(e) => setInputMessage(e.target.value)}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter' && !e.shiftKey) {\n                      e.preventDefault();\n                      handleSendMessage();\n                    }\n                  }}\n                  className=\"resize-none\"\n                  rows={1}\n                  disabled={chatMutation.isPending}\n                  data-testid=\"input-chat-message\"\n                />\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={!inputMessage.trim() || chatMutation.isPending}\n                  data-testid=\"button-send-message\"\n                >\n                  {chatMutation.isPending ? (\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary-foreground\"></div>\n                  ) : (\n                    <span className=\"material-symbols-outlined\">send</span>\n                  )}\n                </Button>\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-2\">\n                Each message costs credits based on length (1 credit per ~100 characters). You have {user?.credits || 0} credits remaining.\n              </p>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":7639},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { CustomInput, CustomButton, CustomCheckbox, CustomForm } from \"@/components/custom-form\";\n\ntype LoginData = {\n  username: string;\n  password: string;\n};\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst registerSchema = insertUserSchema.extend({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  username: z.string().min(1, \"Username is required\"),\n  email: z.string().min(1, \"Email is required\").email(\"Please enter a valid email\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport default function AuthPage() {\n  const { user, isLoading, loginMutation, registerMutation } = useAuth();\n  const [, setLocation] = useLocation();\n  const [isLogin, setIsLogin] = useState(true);\n\n  const loginForm = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<z.infer<typeof registerSchema>>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      firstName: \"\",\n      lastName: \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && user) {\n      setLocation(\"/app\");\n    }\n  }, [user, isLoading, setLocation]);\n\n  if (isLoading) {\n    return <div className=\"min-h-screen flex items-center justify-center\">Loading...</div>;\n  }\n\n  const handleLogin = (data: LoginData) => {\n    loginMutation.mutate(data, {\n      onSuccess: () => setLocation(\"/app\"),\n    });\n  };\n\n  const handleRegister = (data: z.infer<typeof registerSchema>) => {\n    const { confirmPassword, ...registerData } = data;\n    registerMutation.mutate(registerData, {\n      onSuccess: () => setLocation(\"/app\"),\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Left side - Auth Form */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md\">\n          <div className=\"text-center mb-8\">\n            <div className=\"font-heading font-bold text-3xl mb-2\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <span className=\"material-symbols-outlined text-white text-3xl\">psychology</span>\n              </div>\n              <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">SaaS</span><span className=\"text-foreground\">Hub</span>\n            </div>\n            <h2 className=\"font-heading text-3xl font-bold\">\n              {isLogin ? \"Welcome Back\" : \"Create Account\"}\n            </h2>\n            <p className=\"mt-2 text-muted-foreground\">\n              {isLogin ? \"Sign in to your account\" : \"Get started with your free account\"}\n            </p>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>{isLogin ? \"Sign In\" : \"Register\"}</CardTitle>\n              <CardDescription>\n                {isLogin \n                  ? \"Enter your credentials to access your account\"\n                  : \"Fill in your information to create an account\"\n                }\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Social Auth Buttons */}\n              <div className=\"space-y-3\">\n                <CustomButton \n                  variant=\"outline\" \n                  className=\"w-full\" \n                  data-testid=\"button-google-auth\"\n                >\n                  <span className=\"material-symbols-outlined mr-2\">google</span>\n                  Continue with Google\n                </CustomButton>\n                <CustomButton \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  data-testid=\"button-apple-auth\"\n                >\n                  <span className=\"material-symbols-outlined mr-2\">apple</span>\n                  Continue with Apple\n                </CustomButton>\n              </div>\n\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <Separator />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-background px-2 text-muted-foreground\">\n                    Or continue with\n                  </span>\n                </div>\n              </div>\n\n              {/* Login Form */}\n              {isLogin ? (\n                <CustomForm onSubmit={loginForm.handleSubmit(handleLogin)}>\n                  <CustomInput\n                    label=\"Username\"\n                    placeholder=\"Enter your username\"\n                    data-testid=\"input-username\"\n                    error={loginForm.formState.errors.username?.message}\n                    {...loginForm.register(\"username\")}\n                  />\n                  <CustomInput\n                    label=\"Password\"\n                    type=\"password\"\n                    placeholder=\"Enter your password\"\n                    data-testid=\"input-password\"\n                    error={loginForm.formState.errors.password?.message}\n                    {...loginForm.register(\"password\")}\n                  />\n                  <div className=\"flex items-center justify-between\">\n                    <CustomCheckbox \n                      id=\"remember\" \n                      label=\"Remember me\"\n                    />\n                    <CustomButton variant=\"ghost\" size=\"sm\">\n                      Forgot password?\n                    </CustomButton>\n                  </div>\n                  <CustomButton \n                    type=\"submit\" \n                    className=\"w-full\" \n                    loading={loginMutation.isPending}\n                    data-testid=\"button-sign-in\"\n                  >\n                    {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n                  </CustomButton>\n                </CustomForm>\n              ) : (\n                /* Register Form */\n                <CustomForm onSubmit={registerForm.handleSubmit(handleRegister)}>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <CustomInput\n                      label=\"First Name\"\n                      placeholder=\"John\"\n                      data-testid=\"input-first-name\"\n                      error={registerForm.formState.errors.firstName?.message}\n                      {...registerForm.register(\"firstName\")}\n                    />\n                    <CustomInput\n                      label=\"Last Name\"\n                      placeholder=\"Doe\"\n                      data-testid=\"input-last-name\"\n                      error={registerForm.formState.errors.lastName?.message}\n                      {...registerForm.register(\"lastName\")}\n                    />\n                  </div>\n                  <CustomInput\n                    label=\"Username\"\n                    placeholder=\"Choose a username\"\n                    data-testid=\"input-register-username\"\n                    error={registerForm.formState.errors.username?.message}\n                    {...registerForm.register(\"username\")}\n                  />\n                  <CustomInput\n                    label=\"Email\"\n                    type=\"email\"\n                    placeholder=\"john@example.com\"\n                    data-testid=\"input-email\"\n                    error={registerForm.formState.errors.email?.message}\n                    {...registerForm.register(\"email\")}\n                  />\n                  <CustomInput\n                    label=\"Password\"\n                    type=\"password\"\n                    placeholder=\"Create a password\"\n                    data-testid=\"input-register-password\"\n                    error={registerForm.formState.errors.password?.message}\n                    {...registerForm.register(\"password\")}\n                  />\n                  <CustomInput\n                    label=\"Confirm Password\"\n                    type=\"password\"\n                    placeholder=\"Confirm your password\"\n                    data-testid=\"input-confirm-password\"\n                    error={registerForm.formState.errors.confirmPassword?.message}\n                    {...registerForm.register(\"confirmPassword\")}\n                  />\n                  <CustomButton \n                    type=\"submit\" \n                    className=\"w-full\" \n                    loading={registerMutation.isPending}\n                    data-testid=\"button-register\"\n                  >\n                    {registerMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n                  </CustomButton>\n                </CustomForm>\n              )}\n\n              {/* Mobile Auth Option */}\n              <Separator />\n              <CustomButton \n                variant=\"outline\" \n                className=\"w-full\"\n                data-testid=\"button-phone-auth\"\n              >\n                <span className=\"material-symbols-outlined mr-2\">phone</span>\n                Sign in with Phone Number\n              </CustomButton>\n\n              {/* Toggle between login/register */}\n              <div className=\"text-center\">\n                <p className=\"text-sm text-muted-foreground\">\n                  {isLogin ? \"Don't have an account? \" : \"Already have an account? \"}\n                  <CustomButton\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setIsLogin(!isLogin)}\n                    data-testid=\"button-toggle-auth\"\n                  >\n                    {isLogin ? \"Sign up for free\" : \"Sign in\"}\n                  </CustomButton>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Right side - Hero Section */}\n      <div className=\"hidden lg:flex flex-1 bg-muted items-center justify-center p-8\">\n        <div className=\"max-w-md text-center\">\n          <div className=\"w-24 h-24 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-6\">\n            <span className=\"material-symbols-outlined text-primary-foreground text-3xl\">psychology</span>\n          </div>\n          <h3 className=\"font-heading text-2xl font-bold mb-4\">\n            Welcome to the Future of AI\n          </h3>\n          <p className=\"text-muted-foreground mb-6\">\n            Join thousands of businesses that are already using our AI platform to transform their operations and drive growth.\n          </p>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center text-sm\">\n              <span className=\"material-symbols-outlined text-primary mr-2\">check_circle</span>\n              <span>Advanced AI Analytics</span>\n            </div>\n            <div className=\"flex items-center text-sm\">\n              <span className=\"material-symbols-outlined text-primary mr-2\">check_circle</span>\n              <span>Real-time Processing</span>\n            </div>\n            <div className=\"flex items-center text-sm\">\n              <span className=\"material-symbols-outlined text-primary mr-2\">check_circle</span>\n              <span>Enterprise-grade Security</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12127},"client/src/pages/buy-credits-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Navbar from \"@/components/navbar\";\nimport Sidebar from \"@/components/sidebar\";\n\ndeclare global {\n  interface Window {\n    Razorpay: any;\n  }\n}\n\nconst creditPackages = [\n  {\n    id: \"starter\",\n    name: \"Starter Pack\",\n    credits: 1000,\n    price: { usd: 9.99, inr: 749 },\n    description: \"Perfect for getting started with AI\",\n    popular: false,\n    features: [\"1,000 API Credits\", \"Basic Support\", \"30 Days Validity\", \"Rate Limit: 100/hour\"]\n  },\n  {\n    id: \"professional\",\n    name: \"Professional\",\n    credits: 5000,\n    price: { usd: 39.99, inr: 2999 },\n    description: \"Ideal for growing businesses\",\n    popular: true,\n    features: [\"5,000 API Credits\", \"Priority Support\", \"90 Days Validity\", \"Rate Limit: 500/hour\", \"Advanced Analytics\"]\n  },\n  {\n    id: \"enterprise\",\n    name: \"Enterprise\",\n    credits: 15000,\n    price: { usd: 99.99, inr: 7499 },\n    description: \"For large-scale applications\",\n    popular: false,\n    features: [\"15,000 API Credits\", \"24/7 Premium Support\", \"365 Days Validity\", \"Rate Limit: 1000/hour\", \"Custom Integrations\", \"Dedicated Account Manager\"]\n  },\n  {\n    id: \"unlimited\",\n    name: \"Unlimited\",\n    credits: 50000,\n    price: { usd: 299.99, inr: 22499 },\n    description: \"Ultimate power for enterprises\",\n    popular: false,\n    features: [\"50,000 API Credits\", \"White-glove Support\", \"365 Days Validity\", \"Unlimited Rate Limit\", \"Custom AI Models\", \"Private Cloud Option\"]\n  }\n];\n\nexport default function BuyCreditsPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [currency, setCurrency] = useState<'usd' | 'inr'>('usd');\n  const [loadingPackage, setLoadingPackage] = useState<string | null>(null);\n\n  // Auto-detect billing country based on location (simplified)\n  const [billingCountry, setBillingCountry] = useState<string>('US');\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  \n  useState(() => {\n    // In a real app, you might use a geolocation API or user preferences\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    if (timezone.includes('Asia/Kolkata') || timezone.includes('India')) {\n      setBillingCountry('IN');\n      setCurrency('inr');\n    } else {\n      setBillingCountry('US');\n      setCurrency('usd');\n    }\n  });\n\n  const createOrderMutation = useMutation({\n    mutationFn: async ({ packageId }: { packageId: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/payments/create-order\", {\n        packageId,\n        billingCountry\n      });\n      return await res.json();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Order Creation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setLoadingPackage(null);\n    },\n  });\n\n  const handlePurchase = async (packageId: string) => {\n    setLoadingPackage(packageId);\n    \n    try {\n      const order = await createOrderMutation.mutateAsync({ packageId });\n      \n      // Load Razorpay script if not already loaded\n      if (!window.Razorpay) {\n        const script = document.createElement('script');\n        script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n        script.async = true;\n        document.body.appendChild(script);\n        \n        await new Promise((resolve, reject) => {\n          script.onload = resolve;\n          script.onerror = reject;\n        });\n      }\n\n      const options = {\n        key: import.meta.env.VITE_RAZORPAY_KEY_ID || 'rzp_test_key',\n        amount: order.amount, // Use server-returned amount\n        currency: order.currency, // Use server-returned currency\n        name: 'SaasHub',\n        description: `${order.package.name} - ${order.package.credits} Credits`,\n        image: '/favicon.ico',\n        order_id: order.id,\n        handler: async function (response: any) {\n          try {\n            // Verify payment on server\n            await apiRequest(\"POST\", \"/api/payments/verify\", {\n              razorpay_order_id: response.razorpay_order_id,\n              razorpay_payment_id: response.razorpay_payment_id,\n              razorpay_signature: response.razorpay_signature,\n              packageId: packageId\n            });\n            \n            // Invalidate user query to refresh credits\n            queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n            \n            const selectedPackage = creditPackages.find(p => p.id === packageId);\n            toast({\n              title: \"Payment Successful! 🎉\",\n              description: `${selectedPackage?.credits || 'Your'} credits have been added to your account.`,\n              variant: \"default\",\n            });\n            \n            setLoadingPackage(null);\n          } catch (error: any) {\n            toast({\n              title: \"Payment Verification Failed\",\n              description: error.message,\n              variant: \"destructive\",\n            });\n            setLoadingPackage(null);\n          }\n        },\n        prefill: {\n          name: `${user?.firstName || ''} ${user?.lastName || ''}`.trim() || user?.username,\n          email: user?.email,\n        },\n        notes: {\n          package_id: packageId,\n          user_id: user?.id,\n        },\n        theme: {\n          color: '#3b82f6'\n        },\n        modal: {\n          ondismiss: function() {\n            setLoadingPackage(null);\n          }\n        }\n      };\n\n      const rzp = new window.Razorpay(options);\n      rzp.open();\n      \n    } catch (error: any) {\n      toast({\n        title: \"Payment Setup Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setLoadingPackage(null);\n    }\n  };\n\n  const formatPrice = (amount: number, curr: string) => {\n    return new Intl.NumberFormat(curr === 'inr' ? 'en-IN' : 'en-US', {\n      style: 'currency',\n      currency: curr.toUpperCase(),\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      <div className=\"flex\">\n        <Sidebar open={sidebarOpen} setOpen={setSidebarOpen} />\n        <main className=\"flex-1 p-6 lg:p-8\">\n          <div className=\"max-w-6xl mx-auto space-y-6\">\n            {/* Header */}\n            <div className=\"text-center space-y-4\">\n              <h1 className=\"text-4xl font-bold tracking-tight\" data-testid=\"text-buy-credits-title\">\n                Choose Your Credit Package\n              </h1>\n              <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n                Select the perfect package for your AI needs. All packages include access to our full suite of AI models.\n              </p>\n              \n              {/* Currency Toggle */}\n              <div className=\"flex items-center justify-center gap-2 mt-6\">\n                <span className=\"text-sm text-muted-foreground\">Currency:</span>\n                <div className=\"flex bg-muted rounded-lg p-1\">\n                  <Button\n                    variant={currency === 'usd' ? 'default' : 'ghost'}\n                    size=\"sm\"\n                    onClick={() => setCurrency('usd')}\n                    data-testid=\"button-currency-usd\"\n                    className=\"px-3\"\n                  >\n                    🇺🇸 USD\n                  </Button>\n                  <Button\n                    variant={currency === 'inr' ? 'default' : 'ghost'}\n                    size=\"sm\"\n                    onClick={() => setCurrency('inr')}\n                    data-testid=\"button-currency-inr\"\n                    className=\"px-3\"\n                  >\n                    🇮🇳 INR\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Current Balance */}\n            <Card className=\"max-w-md mx-auto\">\n              <CardHeader className=\"text-center\">\n                <CardTitle>Current Balance</CardTitle>\n                <CardDescription>Your available credits</CardDescription>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <div className=\"text-3xl font-bold text-primary\" data-testid=\"text-current-credits\">\n                  {user?.credits || 0} Credits\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Enough for approximately {Math.floor((user?.credits || 0) / 5)} AI requests\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Credit Packages */}\n            <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n              {creditPackages.map((pkg) => (\n                <Card \n                  key={pkg.id} \n                  className={`relative ${pkg.popular ? 'ring-2 ring-primary shadow-lg scale-105' : ''}`}\n                  data-testid={`card-package-${pkg.id}`}\n                >\n                  {pkg.popular && (\n                    <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                      <Badge className=\"bg-primary text-primary-foreground\">Most Popular</Badge>\n                    </div>\n                  )}\n                  \n                  <CardHeader className=\"text-center\">\n                    <CardTitle className=\"text-xl\">{pkg.name}</CardTitle>\n                    <CardDescription>{pkg.description}</CardDescription>\n                    <div className=\"mt-4\">\n                      <div className=\"text-3xl font-bold\">\n                        {formatPrice(pkg.price[currency], currency)}\n                      </div>\n                      <div className=\"text-lg text-muted-foreground\">\n                        {pkg.credits.toLocaleString()} Credits\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {formatPrice(pkg.price[currency] / pkg.credits, currency)} per credit\n                      </div>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-4\">\n                    <Button \n                      className=\"w-full\" \n                      onClick={() => handlePurchase(pkg.id)}\n                      disabled={loadingPackage === pkg.id}\n                      data-testid={`button-buy-${pkg.id}`}\n                    >\n                      {loadingPackage === pkg.id ? (\n                        <>\n                          <span className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></span>\n                          Processing...\n                        </>\n                      ) : (\n                        <>\n                          <span className=\"material-symbols-outlined mr-2\">payment</span>\n                          Buy Now\n                        </>\n                      )}\n                    </Button>\n                    \n                    <Separator />\n                    \n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-semibold text-sm\">Included:</h4>\n                      {pkg.features.map((feature, index) => (\n                        <div key={index} className=\"flex items-center text-sm\">\n                          <span className=\"material-symbols-outlined text-green-500 mr-2 text-base\">check</span>\n                          {feature}\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Payment Security */}\n            <Card className=\"max-w-2xl mx-auto\">\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center space-y-4\">\n                  <h3 className=\"font-semibold\">Secure Payment Processing</h3>\n                  <div className=\"flex items-center justify-center space-x-6\">\n                    <div className=\"flex items-center\">\n                      <span className=\"material-symbols-outlined text-green-500 mr-2\">security</span>\n                      <span className=\"text-sm\">256-bit SSL</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <span className=\"material-symbols-outlined text-green-500 mr-2\">verified</span>\n                      <span className=\"text-sm\">PCI DSS Compliant</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <span className=\"material-symbols-outlined text-green-500 mr-2\">account_balance</span>\n                      <span className=\"text-sm\">Razorpay Secured</span>\n                    </div>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    All payments are processed securely through Razorpay. Your financial information is never stored on our servers.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* FAQ Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Frequently Asked Questions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-semibold text-sm\">How do credits work?</h4>\n                  <p className=\"text-sm text-muted-foreground\">Each API call consumes credits based on the model and complexity. Simple text generation uses 1-5 credits, while complex operations may use 10-20 credits.</p>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-sm\">Do credits expire?</h4>\n                  <p className=\"text-sm text-muted-foreground\">Yes, credits have a validity period as mentioned in each package. Unused credits expire after the validity period.</p>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-sm\">Can I get a refund?</h4>\n                  <p className=\"text-sm text-muted-foreground\">We offer refunds for unused credits within 7 days of purchase. Please contact our support team for assistance.</p>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-sm\">Is there a free tier?</h4>\n                  <p className=\"text-sm text-muted-foreground\">New users receive 100 free credits upon registration. You can always purchase additional credits as needed.</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":14952},"client/src/pages/credits-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/sidebar\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\ninterface CreditPackage {\n  credits: number;\n  priceUSD: number;\n  priceINR: number;\n  name: string;\n}\n\nexport default function CreditsPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const isMobile = useIsMobile();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [selectedPackage, setSelectedPackage] = useState<string>(\"professional\");\n  const [currency, setCurrency] = useState<\"USD\" | \"INR\">(\"USD\");\n\n  const { data: packages, isLoading: packagesLoading } = useQuery({\n    queryKey: [\"/api/credits/packages\"],\n  });\n\n  const createOrderMutation = useMutation({\n    mutationFn: async (data: { packageType: string; currency: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/credits/create-order\", data);\n      return await res.json();\n    },\n    onSuccess: (orderData) => {\n      handleRazorpayPayment(orderData);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Order creation failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const verifyPaymentMutation = useMutation({\n    mutationFn: async (paymentData: any) => {\n      const res = await apiRequest(\"POST\", \"/api/credits/verify-payment\", paymentData);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Payment successful!\",\n        description: \"Credits have been added to your account.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Payment verification failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRazorpayPayment = (orderData: any) => {\n    // In a real implementation, you would load the Razorpay SDK\n    // and create the payment interface here\n    const options = {\n      key: orderData.key,\n      amount: orderData.amount,\n      currency: orderData.currency,\n      order_id: orderData.orderId,\n      name: \"AISAAS\",\n      description: `${packages[selectedPackage].name} - ${packages[selectedPackage].credits} Credits`,\n      handler: function (response: any) {\n        verifyPaymentMutation.mutate({\n          razorpayOrderId: orderData.orderId,\n          razorpayPaymentId: response.razorpay_payment_id,\n          razorpaySignature: response.razorpay_signature,\n        });\n      },\n      prefill: {\n        name: `${user?.firstName || ''} ${user?.lastName || ''}`.trim() || user?.username,\n        email: user?.email,\n        contact: user?.phone || \"\",\n      },\n      theme: {\n        color: \"#3B82F6\",\n      },\n    };\n\n    // For demonstration purposes, we'll simulate the payment flow\n    toast({\n      title: \"Payment Gateway\",\n      description: \"In a real implementation, Razorpay payment interface would open here.\",\n    });\n\n    // Simulate successful payment after 2 seconds\n    setTimeout(() => {\n      verifyPaymentMutation.mutate({\n        razorpayOrderId: orderData.orderId,\n        razorpayPaymentId: `pay_${Date.now()}`,\n        razorpaySignature: \"simulated_signature\",\n      });\n    }, 2000);\n  };\n\n  const handlePurchase = () => {\n    createOrderMutation.mutate({\n      packageType: selectedPackage,\n      currency,\n    });\n  };\n\n  if (packagesLoading) {\n    return (\n      <div className=\"flex\">\n        <Sidebar open={sidebarOpen} setOpen={setSidebarOpen} />\n        <div className=\"flex-1 lg:ml-64 p-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded mb-4\"></div>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"h-64 bg-muted rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex min-h-screen bg-background\">\n      <Sidebar open={sidebarOpen} setOpen={setSidebarOpen} />\n      \n      <div className=\"flex-1 lg:ml-64\">\n        {/* Header */}\n        <div className=\"bg-background border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"font-heading text-2xl font-bold\">Buy Credits</h1>\n              <p className=\"text-muted-foreground\">Purchase credits to power your AI operations</p>\n            </div>\n            {isMobile && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSidebarOpen(true)}\n                data-testid=\"button-mobile-menu\"\n              >\n                <span className=\"material-symbols-outlined\">menu</span>\n              </Button>\n            )}\n          </div>\n        </div>\n\n        <div className=\"p-6\">\n          {/* Current Balance */}\n          <Card className=\"mb-8\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"font-heading text-lg font-semibold mb-2\">Current Balance</h3>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"text-3xl font-bold text-primary\" data-testid=\"text-current-credits\">\n                      {user?.credits?.toLocaleString() || 0} Credits\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      ≈ ${((user?.credits || 0) * 0.01).toFixed(2)} USD value\n                    </div>\n                  </div>\n                </div>\n                <div className=\"w-16 h-16 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <span className=\"material-symbols-outlined text-primary text-2xl\">account_balance_wallet</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Credit Packages */}\n          <div className=\"mb-8\">\n            <h3 className=\"font-heading text-lg font-semibold mb-6\">Choose Credit Package</h3>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {packages && Object.entries(packages).map(([key, pkg]: [string, any]) => (\n                <Card \n                  key={key}\n                  className={`cursor-pointer transition-colors ${\n                    selectedPackage === key ? 'border-primary ring-2 ring-primary/20' : 'hover:border-primary'\n                  } ${key === 'professional' ? 'relative' : ''}`}\n                  onClick={() => setSelectedPackage(key)}\n                  data-testid={`card-package-${key}`}\n                >\n                  {key === 'professional' && (\n                    <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                      <span className=\"bg-primary text-primary-foreground px-3 py-1 rounded-full text-sm font-medium\">\n                        Popular\n                      </span>\n                    </div>\n                  )}\n                  <CardContent className=\"p-6 text-center\">\n                    <h4 className=\"font-heading text-xl font-semibold mb-2\">{pkg.name}</h4>\n                    <div className=\"text-3xl font-bold text-primary mb-2\">\n                      {pkg.credits.toLocaleString()}\n                    </div>\n                    <div className=\"text-muted-foreground mb-4\">Credits</div>\n                    <div className=\"space-y-1\">\n                      <div className=\"text-lg font-semibold\">${pkg.priceUSD} USD</div>\n                      <div className=\"text-sm text-muted-foreground\">₹{pkg.priceINR} INR</div>\n                    </div>\n                    {key === 'professional' && (\n                      <div className=\"mt-4 text-sm text-green-600\">\n                        Save 10% • Most Popular\n                      </div>\n                    )}\n                    {key === 'enterprise' && (\n                      <div className=\"mt-4 text-sm text-green-600\">\n                        Save 20% • Best Value\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          {/* Payment Form */}\n          <div className=\"max-w-md mx-auto\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-heading text-lg font-semibold mb-6\">Payment Details</h3>\n                \n                {/* Currency Selector */}\n                <div className=\"mb-6\">\n                  <label className=\"block text-sm font-medium mb-2\">Currency</label>\n                  <Select value={currency} onValueChange={(value: \"USD\" | \"INR\") => setCurrency(value)}>\n                    <SelectTrigger data-testid=\"select-currency\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"USD\">USD - US Dollar</SelectItem>\n                      <SelectItem value=\"INR\">INR - Indian Rupee</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Selected Package Display */}\n                {packages && selectedPackage && (\n                  <div className=\"mb-6 p-4 bg-muted rounded-lg\" data-testid=\"selected-package-display\">\n                    <div className=\"flex justify-between items-center\">\n                      <div>\n                        <div className=\"font-medium\">{packages[selectedPackage].name}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {packages[selectedPackage].credits.toLocaleString()} Credits\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold\">\n                          {currency === \"USD\" \n                            ? `$${packages[selectedPackage].priceUSD}` \n                            : `₹${packages[selectedPackage].priceINR}`\n                          } {currency}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Payment Button */}\n                <Button \n                  className=\"w-full\" \n                  size=\"lg\" \n                  onClick={handlePurchase}\n                  disabled={createOrderMutation.isPending || verifyPaymentMutation.isPending}\n                  data-testid=\"button-pay-with-razorpay\"\n                >\n                  <span className=\"material-symbols-outlined mr-2\">payment</span>\n                  {createOrderMutation.isPending || verifyPaymentMutation.isPending\n                    ? \"Processing...\"\n                    : \"Pay with Razorpay\"\n                  }\n                </Button>\n\n                <div className=\"mt-4 text-center\">\n                  <p className=\"text-xs text-muted-foreground\">\n                    Secure payment powered by Razorpay. Your payment information is encrypted and secure.\n                  </p>\n                </div>\n\n                {/* Payment Methods */}\n                <div className=\"mt-6 pt-6 border-t border-border\">\n                  <p className=\"text-sm font-medium mb-3\">Accepted Payment Methods</p>\n                  <div className=\"flex items-center space-x-3 text-muted-foreground\">\n                    <span className=\"material-symbols-outlined\">credit_card</span>\n                    <span className=\"material-symbols-outlined\">account_balance</span>\n                    <span className=\"material-symbols-outlined\">wallet</span>\n                    <span className=\"text-xs\">UPI, Cards, Net Banking & More</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12408},"client/src/pages/dashboard-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport Sidebar from \"@/components/sidebar\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { useState } from \"react\";\n\nexport default function DashboardPage() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const isMobile = useIsMobile();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: activity, isLoading: activityLoading } = useQuery({\n    queryKey: [\"/api/dashboard/activity\"],\n  });\n\n  if (statsLoading) {\n    return (\n      <div className=\"flex\">\n        <Sidebar open={sidebarOpen} setOpen={setSidebarOpen} />\n        <div className=\"flex-1 lg:ml-64 p-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded mb-4\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-muted rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex min-h-screen bg-background\">\n      <Sidebar open={sidebarOpen} setOpen={setSidebarOpen} />\n      \n      <div className=\"flex-1 lg:ml-64\">\n        {/* Header */}\n        <div className=\"bg-background border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"font-heading text-2xl font-bold\">Dashboard</h1>\n              <p className=\"text-muted-foreground\">\n                Welcome back, {user?.firstName || user?.username || 'User'}\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              {isMobile && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setSidebarOpen(true)}\n                  data-testid=\"button-mobile-menu\"\n                >\n                  <span className=\"material-symbols-outlined\">menu</span>\n                </Button>\n              )}\n              <Card className=\"px-4 py-2 border border-border\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"material-symbols-outlined text-primary\">account_balance_wallet</span>\n                  <span className=\"font-medium\" data-testid=\"text-credits\">\n                    {user?.credits?.toLocaleString() || 0} Credits\n                  </span>\n                </div>\n              </Card>\n            </div>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm\">Total Credits</p>\n                    <p className=\"text-2xl font-bold\" data-testid=\"stat-total-credits\">\n                      {(stats as any)?.totalCredits?.toLocaleString() || '0'}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <span className=\"material-symbols-outlined text-primary\">account_balance_wallet</span>\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center text-sm\">\n                  <span className=\"text-green-600\">+12%</span>\n                  <span className=\"text-muted-foreground ml-1\">from last month</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm\">Credits Used</p>\n                    <p className=\"text-2xl font-bold\" data-testid=\"stat-credits-used\">\n                      {(stats as any)?.creditsUsed?.toLocaleString() || '0'}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-2/10 rounded-lg flex items-center justify-center\">\n                    <span className=\"material-symbols-outlined text-chart-2\">trending_up</span>\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center text-sm\">\n                  <span className=\"text-green-600\">+8%</span>\n                  <span className=\"text-muted-foreground ml-1\">from last week</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm\">API Calls</p>\n                    <p className=\"text-2xl font-bold\" data-testid=\"stat-api-calls\">\n                      {(stats as any)?.apiCalls?.toLocaleString() || '0'}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-3/10 rounded-lg flex items-center justify-center\">\n                    <span className=\"material-symbols-outlined text-chart-3\">api</span>\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center text-sm\">\n                  <span className=\"text-green-600\">+24%</span>\n                  <span className=\"text-muted-foreground ml-1\">from last month</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm\">Success Rate</p>\n                    <p className=\"text-2xl font-bold\" data-testid=\"stat-success-rate\">\n                      {(stats as any)?.successRate || '100.0'}%\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center\">\n                    <span className=\"material-symbols-outlined text-green-600 dark:text-green-400\">check_circle</span>\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center text-sm\">\n                  <span className=\"text-green-600\">+0.3%</span>\n                  <span className=\"text-muted-foreground ml-1\">from last week</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Actions & Recent Activity */}\n          <div className=\"grid lg:grid-cols-3 gap-6 mb-8\">\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <h3 className=\"font-heading text-lg font-semibold\">Recent Activity</h3>\n                    <Button variant=\"link\" className=\"text-sm\">\n                      View All\n                    </Button>\n                  </div>\n                  <div className=\"space-y-4\">\n                    {activityLoading ? (\n                      <div className=\"space-y-3\">\n                        {[...Array(3)].map((_, i) => (\n                          <div key={i} className=\"flex items-center space-x-4 p-3\">\n                            <div className=\"w-10 h-10 bg-muted rounded-lg\"></div>\n                            <div className=\"flex-1\">\n                              <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                              <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (activity as any)?.length > 0 ? (\n                      (activity as any[]).map((item: any, index: number) => (\n                        <div key={index} className=\"flex items-center space-x-4 p-3 hover:bg-accent rounded-lg transition-colors\">\n                          <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                            <span className=\"material-symbols-outlined text-primary\">{item.icon}</span>\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"font-medium\">{item.title}</p>\n                            <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {new Date(item.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <span className=\"material-symbols-outlined text-muted-foreground text-4xl mb-2 block\">inbox</span>\n                        <p className=\"text-muted-foreground\">No recent activity</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"space-y-6\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-heading text-lg font-semibold mb-4\">Quick Actions</h3>\n                  <div className=\"space-y-3\">\n                    <Button \n                      className=\"w-full justify-start\" \n                      onClick={() => setLocation(\"/credits\")}\n                      data-testid=\"button-buy-credits\"\n                    >\n                      <span className=\"material-symbols-outlined mr-2\">add</span>\n                      Buy Credits\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <span className=\"material-symbols-outlined mr-2\">upload</span>\n                      Upload Data\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <span className=\"material-symbols-outlined mr-2\">code</span>\n                      API Docs\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-heading text-lg font-semibold mb-4\">Usage This Month</h3>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span>Credits Used</span>\n                        <span>{(stats as any)?.creditsUsed || 0} / {(stats as any)?.totalCredits || 0}</span>\n                      </div>\n                      <div className=\"w-full bg-secondary rounded-full h-2\">\n                        <div \n                          className=\"bg-primary h-2 rounded-full\" \n                          style={{ \n                            width: `${(stats as any)?.totalCredits ? Math.min(((stats as any).creditsUsed / (stats as any).totalCredits) * 100, 100) : 0}%` \n                          }}\n                        ></div>\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span>API Calls</span>\n                        <span>{(stats as any)?.apiCalls || 0} / 25,000</span>\n                      </div>\n                      <div className=\"w-full bg-secondary rounded-full h-2\">\n                        <div \n                          className=\"bg-chart-2 h-2 rounded-full\" \n                          style={{ \n                            width: `${Math.min((((stats as any)?.apiCalls || 0) / 25000) * 100, 100)}%` \n                          }}\n                        ></div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12735},"client/src/pages/landing-page.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Navbar from \"@/components/navbar\";\n\nexport default function LandingPage() {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && user) {\n      setLocation(\"/dashboard\");\n    }\n  }, [user, isLoading, setLocation]);\n\n  if (isLoading) {\n    return <div className=\"min-h-screen flex items-center justify-center\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      \n      {/* Hero Section */}\n      <section className=\"pt-16 pb-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center\">\n            <h1 className=\"font-heading text-4xl sm:text-5xl lg:text-6xl font-bold tracking-tight\">\n              The Future of <span className=\"text-primary\">AI-Powered</span><br />\n              Business Solutions\n            </h1>\n            <p className=\"mt-6 text-lg text-muted-foreground max-w-3xl mx-auto\">\n              Transform your business with our comprehensive AI platform. Get powerful tools, seamless integrations, and intelligent automation all in one place.\n            </p>\n            <div className=\"mt-10 flex justify-center gap-4\">\n              <Button \n                size=\"lg\" \n                onClick={() => setLocation(\"/auth\")} \n                data-testid=\"button-start-trial\"\n              >\n                Start Free Trial\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"lg\" \n                data-testid=\"button-watch-demo\"\n              >\n                Watch Demo\n              </Button>\n            </div>\n            <div className=\"mt-16\">\n              <div className=\"relative max-w-4xl mx-auto\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=800\" \n                  alt=\"AI Dashboard Preview\" \n                  className=\"w-full rounded-xl shadow-2xl border border-border\" \n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-background/20 to-transparent rounded-xl\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 bg-muted/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-heading text-3xl font-bold\">Powerful Features</h2>\n            <p className=\"mt-4 text-muted-foreground\">Everything you need to scale your business with AI</p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[\n              {\n                icon: \"psychology\",\n                title: \"AI Analytics\",\n                description: \"Advanced AI-powered analytics to understand your data and make informed decisions.\"\n              },\n              {\n                icon: \"auto_fix_high\",\n                title: \"Smart Automation\",\n                description: \"Automate repetitive tasks and workflows with intelligent AI assistance.\"\n              },\n              {\n                icon: \"security\",\n                title: \"Enterprise Security\",\n                description: \"Bank-grade security with end-to-end encryption and compliance standards.\"\n              },\n              {\n                icon: \"integration_instructions\",\n                title: \"Easy Integration\",\n                description: \"Connect with your existing tools through our comprehensive API platform.\"\n              },\n              {\n                icon: \"speed\",\n                title: \"Real-time Processing\",\n                description: \"Process data in real-time with our high-performance AI infrastructure.\"\n              },\n              {\n                icon: \"support_agent\",\n                title: \"24/7 Support\",\n                description: \"Get help whenever you need it with our dedicated support team.\"\n              }\n            ].map((feature, index) => (\n              <Card key={index} className=\"border border-border\">\n                <CardContent className=\"p-6\">\n                  <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center mb-4\">\n                    <span className=\"material-symbols-outlined text-primary-foreground\">{feature.icon}</span>\n                  </div>\n                  <h3 className=\"font-heading text-xl font-semibold mb-2\">{feature.title}</h3>\n                  <p className=\"text-muted-foreground\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-heading text-3xl font-bold\">Simple Pricing</h2>\n            <p className=\"mt-4 text-muted-foreground\">Choose the plan that works best for you</p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n            {[\n              {\n                name: \"Starter\",\n                price: \"$29\",\n                features: [\"10,000 AI Credits\", \"Basic Analytics\", \"Email Support\"]\n              },\n              {\n                name: \"Professional\",\n                price: \"$99\",\n                popular: true,\n                features: [\"50,000 AI Credits\", \"Advanced Analytics\", \"Priority Support\", \"API Access\"]\n              },\n              {\n                name: \"Enterprise\",\n                price: \"$299\",\n                features: [\"Unlimited Credits\", \"Custom Analytics\", \"24/7 Phone Support\", \"Custom Integrations\"]\n              }\n            ].map((plan, index) => (\n              <Card \n                key={index} \n                className={`${plan.popular ? 'border-2 border-primary relative' : 'border border-border'}`}\n              >\n                {plan.popular && (\n                  <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                    <span className=\"bg-primary text-primary-foreground px-3 py-1 rounded-full text-sm font-medium\">\n                      Popular\n                    </span>\n                  </div>\n                )}\n                <CardContent className=\"p-8\">\n                  <h3 className=\"font-heading text-xl font-semibold mb-2\">{plan.name}</h3>\n                  <div className=\"mb-4\">\n                    <span className=\"text-3xl font-bold\">{plan.price}</span>\n                    <span className=\"text-muted-foreground\">/month</span>\n                  </div>\n                  <ul className=\"space-y-2 mb-6\">\n                    {plan.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-center\">\n                        <span className=\"material-symbols-outlined text-primary mr-2\">check_circle</span>\n                        <span className=\"text-sm\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                  <Button \n                    variant={plan.popular ? \"default\" : \"outline\"} \n                    className=\"w-full\"\n                    onClick={() => setLocation(\"/auth\")}\n                    data-testid={`button-plan-${plan.name.toLowerCase()}`}\n                  >\n                    Get Started\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-20 bg-muted/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-heading text-3xl font-bold\">What Our Customers Say</h2>\n            <p className=\"mt-4 text-muted-foreground\">Trusted by thousands of businesses worldwide</p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[\n              {\n                name: \"John Smith\",\n                role: \"CEO, TechCorp\",\n                avatar: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\",\n                content: \"This AI platform has transformed our business operations. The automation features alone have saved us hundreds of hours per month.\"\n              },\n              {\n                name: \"Sarah Johnson\",\n                role: \"CTO, DataFlow\",\n                avatar: \"https://images.unsplash.com/photo-1494790108755-2616b6b2ad2c?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\",\n                content: \"The analytics insights are incredible. We've been able to make data-driven decisions faster than ever before.\"\n              },\n              {\n                name: \"Mike Chen\",\n                role: \"Founder, StartupXYZ\",\n                avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\",\n                content: \"As a startup, we needed a solution that could scale with us. This platform delivers exactly that and more.\"\n              }\n            ].map((testimonial, index) => (\n              <Card key={index} className=\"border border-border\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    <img \n                      src={testimonial.avatar} \n                      alt={`${testimonial.name} testimonial`} \n                      className=\"w-12 h-12 rounded-full mr-4\" \n                    />\n                    <div>\n                      <h4 className=\"font-semibold\">{testimonial.name}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{testimonial.role}</p>\n                    </div>\n                  </div>\n                  <p className=\"text-muted-foreground\">{testimonial.content}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"font-heading font-bold text-xl mb-4\">\n                <span className=\"text-primary\">AI</span>SAAS\n              </div>\n              <p className=\"text-muted-foreground text-sm\">\n                The next generation AI platform for modern businesses.\n              </p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Product</h4>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Features</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Pricing</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">API</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Documentation</a></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Company</h4>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">About</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Blog</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Careers</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Contact</a></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Support</h4>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Help Center</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Community</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Status</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Privacy</a></li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-border mt-8 pt-8 text-center text-sm text-muted-foreground\">\n            <p>&copy; 2024 AISAAS. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":13007},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/payment-failure-page.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nexport default function PaymentFailurePage() {\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md text-center\">\n        <CardHeader>\n          <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <span className=\"material-symbols-outlined text-red-600 text-3xl\">error</span>\n          </div>\n          <CardTitle className=\"text-2xl text-red-600\" data-testid=\"text-failure-title\">\n            Payment Failed\n          </CardTitle>\n          <CardDescription>\n            We couldn't process your payment. Please try again.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <Alert className=\"text-left\">\n            <span className=\"material-symbols-outlined h-4 w-4\">info</span>\n            <AlertDescription>\n              <strong>Common reasons for payment failure:</strong>\n              <ul className=\"list-disc list-inside mt-2 text-xs space-y-1\">\n                <li>Insufficient balance in your account</li>\n                <li>Card expired or blocked by bank</li>\n                <li>Network connectivity issues</li>\n                <li>Incorrect card details entered</li>\n              </ul>\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"text-sm text-muted-foreground\">\n            <p>Don't worry! No amount has been charged to your account.</p>\n            <p className=\"mt-2\">You can try the payment again or contact our support team if the issue persists.</p>\n          </div>\n\n          <div className=\"space-y-3\">\n            <Link href=\"/buy-credits\">\n              <Button className=\"w-full\" data-testid=\"button-try-again\">\n                <span className=\"material-symbols-outlined mr-2\">refresh</span>\n                Try Payment Again\n              </Button>\n            </Link>\n            <Link href=\"/support\">\n              <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-contact-support\">\n                <span className=\"material-symbols-outlined mr-2\">support_agent</span>\n                Contact Support\n              </Button>\n            </Link>\n            <Link href=\"/app\">\n              <Button variant=\"ghost\" className=\"w-full\" data-testid=\"button-back-to-dashboard\">\n                <span className=\"material-symbols-outlined mr-2\">arrow_back</span>\n                Back to Dashboard\n              </Button>\n            </Link>\n          </div>\n\n          <div className=\"text-xs text-muted-foreground border-t pt-4\">\n            <p className=\"font-semibold\">Need immediate help?</p>\n            <p>Email: support@saashub.com</p>\n            <p>Phone: 1-800-SAASHUB</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3067},"client/src/pages/payment-history-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport Sidebar from \"@/components/sidebar\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\nexport default function PaymentHistoryPage() {\n  const isMobile = useIsMobile();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [filter, setFilter] = useState(\"all\");\n\n  const { data: transactions, isLoading: transactionsLoading } = useQuery({\n    queryKey: [\"/api/payments\"],\n  });\n\n  const { data: summary, isLoading: summaryLoading } = useQuery({\n    queryKey: [\"/api/payments/summary\"],\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case \"completed\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n      case \"failed\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\n    }\n  };\n\n  const filteredTransactions = transactions?.filter((transaction: any) => {\n    if (filter === \"all\") return true;\n    return transaction.status.toLowerCase() === filter;\n  }) || [];\n\n  if (transactionsLoading || summaryLoading) {\n    return (\n      <div className=\"flex\">\n        <Sidebar open={sidebarOpen} setOpen={setSidebarOpen} />\n        <div className=\"flex-1 lg:ml-64 p-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded mb-4\"></div>\n            <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-muted rounded-lg\"></div>\n              ))}\n            </div>\n            <div className=\"h-96 bg-muted rounded-lg\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex min-h-screen bg-background\">\n      <Sidebar open={sidebarOpen} setOpen={setSidebarOpen} />\n      \n      <div className=\"flex-1 lg:ml-64\">\n        {/* Header */}\n        <div className=\"bg-background border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"font-heading text-2xl font-bold\">Payment History</h1>\n              <p className=\"text-muted-foreground\">View all your transactions and receipts</p>\n            </div>\n            {isMobile && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSidebarOpen(true)}\n                data-testid=\"button-mobile-menu\"\n              >\n                <span className=\"material-symbols-outlined\">menu</span>\n              </Button>\n            )}\n          </div>\n        </div>\n\n        <div className=\"p-6\">\n          {/* Summary Cards */}\n          <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm\">Total Spent</p>\n                    <p className=\"text-2xl font-bold\" data-testid=\"summary-total-spent\">\n                      ${summary?.totalSpent || \"0.00\"}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <span className=\"material-symbols-outlined text-primary\">payments</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm\">Total Transactions</p>\n                    <p className=\"text-2xl font-bold\" data-testid=\"summary-total-transactions\">\n                      {summary?.totalTransactions || 0}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-2/10 rounded-lg flex items-center justify-center\">\n                    <span className=\"material-symbols-outlined text-chart-2\">receipt_long</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm\">Credits Purchased</p>\n                    <p className=\"text-2xl font-bold\" data-testid=\"summary-total-credits\">\n                      {summary?.totalCredits?.toLocaleString() || 0}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-3/10 rounded-lg flex items-center justify-center\">\n                    <span className=\"material-symbols-outlined text-chart-3\">account_balance_wallet</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Transaction Table */}\n          <Card>\n            <div className=\"p-6 border-b border-border\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"font-heading text-lg font-semibold\">Recent Transactions</h3>\n                <div className=\"flex items-center space-x-4\">\n                  <Select value={filter} onValueChange={setFilter}>\n                    <SelectTrigger className=\"w-48\" data-testid=\"filter-transactions\">\n                      <SelectValue placeholder=\"Filter transactions\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Transactions</SelectItem>\n                      <SelectItem value=\"completed\">Successful</SelectItem>\n                      <SelectItem value=\"failed\">Failed</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-export-csv\">\n                    <span className=\"material-symbols-outlined mr-2\">download</span>\n                    Export CSV\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"overflow-x-auto\">\n              {filteredTransactions.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <span className=\"material-symbols-outlined text-muted-foreground text-4xl mb-4 block\">receipt_long</span>\n                  <h3 className=\"font-heading text-lg font-semibold mb-2\">No transactions found</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {filter === \"all\" \n                      ? \"You haven't made any transactions yet.\"\n                      : `No ${filter} transactions found.`\n                    }\n                  </p>\n                  {filter === \"all\" && (\n                    <Button onClick={() => window.location.href = \"/credits\"} data-testid=\"button-buy-credits\">\n                      Buy Your First Credits\n                    </Button>\n                  )}\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Transaction ID</TableHead>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Package</TableHead>\n                      <TableHead>Amount</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredTransactions.map((transaction: any) => (\n                      <TableRow key={transaction.id} className=\"hover:bg-muted/50\">\n                        <TableCell>\n                          <span className=\"font-mono text-sm\" data-testid={`transaction-id-${transaction.id}`}>\n                            #{transaction.transactionId}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {new Date(transaction.createdAt).toLocaleDateString()}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium\">{transaction.packageName}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {transaction.credits.toLocaleString()} Credits\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"font-medium\">\n                            {transaction.currency === \"INR\" ? \"₹\" : \"$\"}{transaction.amount}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={getStatusColor(transaction.status)} data-testid={`status-${transaction.id}`}>\n                            {transaction.status.charAt(0).toUpperCase() + transaction.status.slice(1)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button \n                              variant=\"link\" \n                              size=\"sm\" \n                              className=\"p-0 h-auto\"\n                              data-testid={`button-view-receipt-${transaction.id}`}\n                            >\n                              View Receipt\n                            </Button>\n                            <Button \n                              variant=\"link\" \n                              size=\"sm\" \n                              className=\"p-0 h-auto\"\n                              data-testid={`button-download-${transaction.id}`}\n                            >\n                              Download\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </div>\n\n            {filteredTransactions.length > 0 && (\n              <div className=\"p-6 border-t border-border\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"text-sm text-muted-foreground\">\n                    Showing {filteredTransactions.length} of {transactions?.length || 0} transactions\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button variant=\"outline\" size=\"sm\" disabled data-testid=\"button-previous-page\">\n                      Previous\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" disabled data-testid=\"button-next-page\">\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11930},"client/src/pages/payment-success-page.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport default function PaymentSuccessPage() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const [countdown, setCountdown] = useState(10);\n\n  // Auto-redirect countdown\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCountdown(prev => prev - 1);\n    }, 1000);\n\n    // Redirect to app after countdown\n    const redirectTimer = setTimeout(() => {\n      setLocation(\"/app\");\n    }, 10000);\n\n    return () => {\n      clearInterval(timer);\n      clearTimeout(redirectTimer);\n    };\n  }, [setLocation]);\n\n  // Refresh user data to get updated credits\n  useEffect(() => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md text-center\">\n        <CardHeader>\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <span className=\"material-symbols-outlined text-green-600 text-3xl\">check_circle</span>\n          </div>\n          <CardTitle className=\"text-2xl text-green-600\" data-testid=\"text-success-title\">\n            Payment Successful! 🎉\n          </CardTitle>\n          <CardDescription>\n            Your credits have been added to your account successfully.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"p-4 bg-green-50 rounded-lg border border-green-200\">\n            <p className=\"text-sm text-green-800 font-medium\">\n              Transaction completed successfully\n            </p>\n            <p className=\"text-xs text-green-600 mt-1\">\n              You should see your new credits in your account within a few seconds.\n            </p>\n          </div>\n\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">Current Balance:</span>\n              <Badge variant=\"secondary\" className=\"text-sm\">\n                {user?.credits || 0} Credits\n              </Badge>\n            </div>\n            <div className=\"text-xs text-muted-foreground\">\n              You can start using your credits immediately for AI API calls.\n            </div>\n          </div>\n\n          <div className=\"space-y-3\">\n            <Link href=\"/app\">\n              <Button className=\"w-full\" data-testid=\"button-go-to-dashboard\">\n                <span className=\"material-symbols-outlined mr-2\">dashboard</span>\n                Go to Dashboard\n              </Button>\n            </Link>\n            <Link href=\"/buy-credits\">\n              <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-buy-more-credits\">\n                <span className=\"material-symbols-outlined mr-2\">add</span>\n                Buy More Credits\n              </Button>\n            </Link>\n          </div>\n\n          <div className=\"text-xs text-muted-foreground\">\n            Auto-redirecting to dashboard in {countdown} seconds...\n            <br />\n            <Button \n              variant=\"link\" \n              size=\"sm\" \n              onClick={() => setLocation(\"/app\")}\n              className=\"text-xs p-0 h-auto\"\n              data-testid=\"button-redirect-now\"\n            >\n              Go now\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3808},"client/src/pages/profile-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/sidebar\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\n\nconst profileSchema = z.object({\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().optional(),\n  company: z.string().optional(),\n});\n\nconst passwordSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport default function ProfilePage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const isMobile = useIsMobile();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const { data: profile, isLoading } = useQuery({\n    queryKey: [\"/api/profile\"],\n  });\n\n  const profileForm = useForm<z.infer<typeof profileSchema>>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      firstName: profile?.firstName || \"\",\n      lastName: profile?.lastName || \"\",\n      email: profile?.email || \"\",\n      phone: profile?.phone || \"\",\n      company: profile?.company || \"\",\n    },\n  });\n\n  const passwordForm = useForm<z.infer<typeof passwordSchema>>({\n    resolver: zodResolver(passwordSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof profileSchema>) => {\n      const res = await apiRequest(\"PATCH\", \"/api/profile\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/profile\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof passwordSchema>) => {\n      const res = await apiRequest(\"PATCH\", \"/api/profile/password\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Password changed\",\n        description: \"Your password has been changed successfully.\",\n      });\n      passwordForm.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Password change failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAccountMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"DELETE\", \"/api/profile\");\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Account deleted\",\n        description: \"Your account has been deleted successfully.\",\n      });\n      // Logout and redirect handled by auth context\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Account deletion failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update form when profile data loads\n  if (profile && !profileForm.formState.isDirty) {\n    profileForm.reset({\n      firstName: profile.firstName || \"\",\n      lastName: profile.lastName || \"\",\n      email: profile.email || \"\",\n      phone: profile.phone || \"\",\n      company: profile.company || \"\",\n    });\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex\">\n        <Sidebar open={sidebarOpen} setOpen={setSidebarOpen} />\n        <div className=\"flex-1 lg:ml-64 p-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded mb-4\"></div>\n            <div className=\"grid lg:grid-cols-3 gap-8\">\n              <div className=\"h-64 bg-muted rounded-lg\"></div>\n              <div className=\"lg:col-span-2 space-y-6\">\n                <div className=\"h-64 bg-muted rounded-lg\"></div>\n                <div className=\"h-64 bg-muted rounded-lg\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const getInitials = (firstName?: string, lastName?: string, username?: string) => {\n    if (firstName && lastName) {\n      return `${firstName[0]}${lastName[0]}`.toUpperCase();\n    }\n    if (username) {\n      return username.slice(0, 2).toUpperCase();\n    }\n    return 'U';\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-background\">\n      <Sidebar open={sidebarOpen} setOpen={setSidebarOpen} />\n      \n      <div className=\"flex-1 lg:ml-64\">\n        {/* Header */}\n        <div className=\"bg-background border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"font-heading text-2xl font-bold\">Profile Settings</h1>\n              <p className=\"text-muted-foreground\">Manage your account information and preferences</p>\n            </div>\n            {isMobile && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSidebarOpen(true)}\n                data-testid=\"button-mobile-menu\"\n              >\n                <span className=\"material-symbols-outlined\">menu</span>\n              </Button>\n            )}\n          </div>\n        </div>\n\n        <div className=\"p-6 max-w-4xl\">\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Profile Picture */}\n            <div className=\"lg:col-span-1\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Profile Picture</CardTitle>\n                </CardHeader>\n                <CardContent className=\"text-center\">\n                  <Avatar className=\"w-24 h-24 mx-auto mb-4\">\n                    <AvatarImage src={profile?.avatar} />\n                    <AvatarFallback className=\"text-lg\">\n                      {getInitials(profile?.firstName, profile?.lastName, profile?.username)}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"space-y-2\">\n                    <Button variant=\"default\" size=\"sm\" data-testid=\"button-upload-picture\">\n                      Upload New Picture\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-remove-picture\">\n                      Remove Picture\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Profile Information */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              {/* Personal Information */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Personal Information</CardTitle>\n                  <CardDescription>Update your personal details</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...profileForm}>\n                    <form onSubmit={profileForm.handleSubmit((data) => updateProfileMutation.mutate(data))} className=\"space-y-4\">\n                      <div className=\"grid md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={profileForm.control}\n                          name=\"firstName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>First Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} data-testid=\"input-first-name\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={profileForm.control}\n                          name=\"lastName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Last Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} data-testid=\"input-last-name\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <FormField\n                        control={profileForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email Address</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"email\" data-testid=\"input-email\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={profileForm.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Phone Number</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"tel\" data-testid=\"input-phone\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={profileForm.control}\n                        name=\"company\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Company</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-company\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button \n                        type=\"submit\" \n                        disabled={updateProfileMutation.isPending}\n                        data-testid=\"button-update-profile\"\n                      >\n                        {updateProfileMutation.isPending ? \"Updating...\" : \"Update Profile\"}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n\n              {/* Change Password */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Change Password</CardTitle>\n                  <CardDescription>Update your account password</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...passwordForm}>\n                    <form onSubmit={passwordForm.handleSubmit((data) => changePasswordMutation.mutate(data))} className=\"space-y-4\">\n                      <FormField\n                        control={passwordForm.control}\n                        name=\"currentPassword\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Current Password</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"password\" data-testid=\"input-current-password\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={passwordForm.control}\n                        name=\"newPassword\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>New Password</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"password\" data-testid=\"input-new-password\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={passwordForm.control}\n                        name=\"confirmPassword\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Confirm New Password</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"password\" data-testid=\"input-confirm-password\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button \n                        type=\"submit\" \n                        disabled={changePasswordMutation.isPending}\n                        data-testid=\"button-change-password\"\n                      >\n                        {changePasswordMutation.isPending ? \"Changing...\" : \"Change Password\"}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n\n              {/* Account Actions */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Account Actions</CardTitle>\n                  <CardDescription>Manage your account settings and data</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium\">Two-Factor Authentication</h4>\n                      <p className=\"text-sm text-muted-foreground\">Add an extra layer of security to your account</p>\n                    </div>\n                    <Button data-testid=\"button-enable-2fa\">\n                      Enable 2FA\n                    </Button>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium\">Export Data</h4>\n                      <p className=\"text-sm text-muted-foreground\">Download a copy of your account data</p>\n                    </div>\n                    <Button variant=\"outline\" data-testid=\"button-export-data\">\n                      Export Data\n                    </Button>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 border border-destructive rounded-lg bg-destructive/5\">\n                    <div>\n                      <h4 className=\"font-medium text-destructive\">Delete Account</h4>\n                      <p className=\"text-sm text-muted-foreground\">Permanently delete your account and all data</p>\n                    </div>\n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button variant=\"destructive\" data-testid=\"button-delete-account\">\n                          Delete Account\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent>\n                        <AlertDialogHeader>\n                          <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n                          <AlertDialogDescription>\n                            This action cannot be undone. This will permanently delete your account\n                            and remove your data from our servers.\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel>Cancel</AlertDialogCancel>\n                          <AlertDialogAction\n                            onClick={() => deleteAccountMutation.mutate()}\n                            disabled={deleteAccountMutation.isPending}\n                            className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                            data-testid=\"button-confirm-delete\"\n                          >\n                            {deleteAccountMutation.isPending ? \"Deleting...\" : \"Delete Account\"}\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17999},"client/src/pages/settings-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormDescription } from \"@/components/ui/form\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useTheme } from \"@/hooks/use-theme\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/sidebar\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\nconst settingsSchema = z.object({\n  theme: z.enum([\"light\", \"dark\", \"system\"]),\n  language: z.string(),\n  emailNotifications: z.boolean(),\n  pushNotifications: z.boolean(),\n  creditAlerts: z.boolean(),\n  dataAnalytics: z.boolean(),\n  marketingCommunications: z.boolean(),\n  rateLimit: z.number(),\n});\n\nexport default function SettingsPage() {\n  const { user } = useAuth();\n  const { theme, setTheme } = useTheme();\n  const { toast } = useToast();\n  const isMobile = useIsMobile();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const { data: settings, isLoading } = useQuery({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const settingsForm = useForm<z.infer<typeof settingsSchema>>({\n    resolver: zodResolver(settingsSchema),\n    defaultValues: {\n      theme: \"system\",\n      language: \"en\",\n      emailNotifications: true,\n      pushNotifications: false,\n      creditAlerts: true,\n      dataAnalytics: true,\n      marketingCommunications: false,\n      rateLimit: 100,\n    },\n  });\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (data: Partial<z.infer<typeof settingsSchema>>) => {\n      const res = await apiRequest(\"PATCH\", \"/api/settings\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Settings updated\",\n        description: \"Your settings have been saved successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const regenerateApiKeyMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/settings/regenerate-api-key\");\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"API key regenerated\",\n        description: \"Your new API key has been generated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to regenerate API key\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update form when settings data loads\n  if (settings && !settingsForm.formState.isDirty) {\n    settingsForm.reset(settings);\n  }\n\n  const handleThemeChange = (newTheme: \"light\" | \"dark\" | \"system\") => {\n    setTheme(newTheme);\n    updateSettingsMutation.mutate({ theme: newTheme });\n  };\n\n  const handleSettingChange = (key: keyof z.infer<typeof settingsSchema>, value: any) => {\n    updateSettingsMutation.mutate({ [key]: value });\n  };\n\n  const copyApiKey = () => {\n    if (user?.apiKey) {\n      navigator.clipboard.writeText(user.apiKey);\n      toast({\n        title: \"API key copied\",\n        description: \"The API key has been copied to your clipboard.\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex\">\n        <Sidebar open={sidebarOpen} setOpen={setSidebarOpen} />\n        <div className=\"flex-1 lg:ml-64 p-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded mb-4\"></div>\n            <div className=\"space-y-6\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-muted rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex min-h-screen bg-background\">\n      <Sidebar open={sidebarOpen} setOpen={setSidebarOpen} />\n      \n      <div className=\"flex-1 lg:ml-64\">\n        {/* Header */}\n        <div className=\"bg-background border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"font-heading text-2xl font-bold\">Settings</h1>\n              <p className=\"text-muted-foreground\">Manage your account preferences and configurations</p>\n            </div>\n            {isMobile && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSidebarOpen(true)}\n                data-testid=\"button-mobile-menu\"\n              >\n                <span className=\"material-symbols-outlined\">menu</span>\n              </Button>\n            )}\n          </div>\n        </div>\n\n        <div className=\"p-6 max-w-4xl\">\n          <div className=\"space-y-6\">\n            {/* Appearance Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Appearance</CardTitle>\n                <CardDescription>Customize the appearance of the application</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"theme-select\" className=\"text-base font-medium\">Theme</Label>\n                    <p className=\"text-sm text-muted-foreground\">Choose your preferred theme</p>\n                  </div>\n                  <Select \n                    value={theme} \n                    onValueChange={handleThemeChange}\n                  >\n                    <SelectTrigger className=\"w-32\" id=\"theme-select\" data-testid=\"select-theme\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"system\">System</SelectItem>\n                      <SelectItem value=\"light\">Light</SelectItem>\n                      <SelectItem value=\"dark\">Dark</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"language-select\" className=\"text-base font-medium\">Language</Label>\n                    <p className=\"text-sm text-muted-foreground\">Select your preferred language</p>\n                  </div>\n                  <Select \n                    value={settings?.language || \"en\"} \n                    onValueChange={(value) => handleSettingChange(\"language\", value)}\n                  >\n                    <SelectTrigger className=\"w-32\" id=\"language-select\" data-testid=\"select-language\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"en\">English</SelectItem>\n                      <SelectItem value=\"es\">Español</SelectItem>\n                      <SelectItem value=\"fr\">Français</SelectItem>\n                      <SelectItem value=\"de\">Deutsch</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Notification Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Notifications</CardTitle>\n                <CardDescription>Configure how you receive notifications</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"email-notifications\" className=\"text-base font-medium\">Email Notifications</Label>\n                    <p className=\"text-sm text-muted-foreground\">Receive notifications via email</p>\n                  </div>\n                  <Switch\n                    id=\"email-notifications\"\n                    checked={settings?.emailNotifications || false}\n                    onCheckedChange={(checked) => handleSettingChange(\"emailNotifications\", checked)}\n                    data-testid=\"switch-email-notifications\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"push-notifications\" className=\"text-base font-medium\">Push Notifications</Label>\n                    <p className=\"text-sm text-muted-foreground\">Receive push notifications in your browser</p>\n                  </div>\n                  <Switch\n                    id=\"push-notifications\"\n                    checked={settings?.pushNotifications || false}\n                    onCheckedChange={(checked) => handleSettingChange(\"pushNotifications\", checked)}\n                    data-testid=\"switch-push-notifications\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"credit-alerts\" className=\"text-base font-medium\">Credit Alerts</Label>\n                    <p className=\"text-sm text-muted-foreground\">Get notified when credits are running low</p>\n                  </div>\n                  <Switch\n                    id=\"credit-alerts\"\n                    checked={settings?.creditAlerts || true}\n                    onCheckedChange={(checked) => handleSettingChange(\"creditAlerts\", checked)}\n                    data-testid=\"switch-credit-alerts\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* API Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle>API Settings</CardTitle>\n                <CardDescription>Manage your API access and configuration</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"api-key\" className=\"text-base font-medium mb-2 block\">API Key</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Input\n                      id=\"api-key\"\n                      type=\"password\"\n                      value={user?.apiKey || \"\"}\n                      readOnly\n                      className=\"font-mono text-sm\"\n                      data-testid=\"input-api-key\"\n                    />\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      onClick={copyApiKey}\n                      data-testid=\"button-copy-api-key\"\n                    >\n                      <span className=\"material-symbols-outlined\">content_copy</span>\n                    </Button>\n                    <Button \n                      size=\"sm\" \n                      onClick={() => regenerateApiKeyMutation.mutate()}\n                      disabled={regenerateApiKeyMutation.isPending}\n                      data-testid=\"button-regenerate-api-key\"\n                    >\n                      {regenerateApiKeyMutation.isPending ? \"Regenerating...\" : \"Regenerate\"}\n                    </Button>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Keep your API key secure and never share it publicly\n                  </p>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"rate-limit\" className=\"text-base font-medium\">Rate Limit</Label>\n                  <p className=\"text-sm text-muted-foreground mb-2\">Maximum requests per minute</p>\n                  <Select \n                    value={settings?.rateLimit?.toString() || \"100\"} \n                    onValueChange={(value) => handleSettingChange(\"rateLimit\", parseInt(value))}\n                  >\n                    <SelectTrigger id=\"rate-limit\" data-testid=\"select-rate-limit\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"100\">100 requests per minute</SelectItem>\n                      <SelectItem value=\"500\">500 requests per minute</SelectItem>\n                      <SelectItem value=\"1000\">1000 requests per minute</SelectItem>\n                      <SelectItem value=\"-1\">Unlimited (Enterprise)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Privacy Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Privacy & Security</CardTitle>\n                <CardDescription>Control your data and privacy preferences</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"data-analytics\" className=\"text-base font-medium\">Data Analytics</Label>\n                    <p className=\"text-sm text-muted-foreground\">Help us improve by sharing anonymous usage data</p>\n                  </div>\n                  <Switch\n                    id=\"data-analytics\"\n                    checked={settings?.dataAnalytics || true}\n                    onCheckedChange={(checked) => handleSettingChange(\"dataAnalytics\", checked)}\n                    data-testid=\"switch-data-analytics\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"marketing-communications\" className=\"text-base font-medium\">Marketing Communications</Label>\n                    <p className=\"text-sm text-muted-foreground\">Receive updates about new features and offers</p>\n                  </div>\n                  <Switch\n                    id=\"marketing-communications\"\n                    checked={settings?.marketingCommunications || false}\n                    onCheckedChange={(checked) => handleSettingChange(\"marketingCommunications\", checked)}\n                    data-testid=\"switch-marketing-communications\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Save Button */}\n            <div className=\"flex justify-end\">\n              <Button \n                onClick={() => toast({ title: \"Settings saved\", description: \"All changes have been saved automatically.\" })}\n                data-testid=\"button-save-settings\"\n              >\n                Save Changes\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15363},"client/src/pages/support-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/sidebar\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { insertSupportTicketSchema } from \"@shared/schema\";\n\nconst supportTicketSchema = insertSupportTicketSchema.extend({\n  userId: z.string().optional(),\n});\n\nconst faqs = [\n  {\n    question: \"How do AI credits work?\",\n    answer: \"AI credits are consumed each time you make an API call or use our AI services. Different operations consume different amounts of credits based on complexity and computational requirements. You can monitor your credit usage in your dashboard and purchase additional credits as needed.\"\n  },\n  {\n    question: \"Can I upgrade or downgrade my plan?\",\n    answer: \"Yes, you can change your credit package at any time. Simply visit the Buy Credits page and select your preferred package. There are no long-term commitments, and you can adjust your usage based on your needs.\"\n  },\n  {\n    question: \"What payment methods do you accept?\",\n    answer: \"We accept all major payment methods through Razorpay, including credit cards, debit cards, UPI, net banking, and digital wallets. Payments are processed securely with bank-grade encryption.\"\n  },\n  {\n    question: \"How secure is my data?\",\n    answer: \"We take data security very seriously. All data is encrypted in transit and at rest using industry-standard encryption. We comply with major security standards and regularly audit our systems for vulnerabilities.\"\n  },\n  {\n    question: \"Do you offer refunds?\",\n    answer: \"We offer refunds on a case-by-case basis. If you're not satisfied with our service, please contact our support team within 30 days of your purchase, and we'll work with you to find a solution.\"\n  },\n  {\n    question: \"How can I integrate your API?\",\n    answer: \"Integration is straightforward with our comprehensive API documentation. You'll need your API key (found in Settings) and can make HTTP requests to our endpoints. We provide SDKs for popular programming languages and detailed examples.\"\n  }\n];\n\nexport default function SupportPage() {\n  const { toast } = useToast();\n  const isMobile = useIsMobile();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [openFaqs, setOpenFaqs] = useState<number[]>([]);\n\n  const supportForm = useForm<z.infer<typeof supportTicketSchema>>({\n    resolver: zodResolver(supportTicketSchema),\n    defaultValues: {\n      subject: \"\",\n      category: \"\",\n      message: \"\",\n    },\n  });\n\n  const { data: tickets, isLoading: ticketsLoading } = useQuery({\n    queryKey: [\"/api/support/tickets\"],\n  });\n\n  const createTicketMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof supportTicketSchema>) => {\n      const res = await apiRequest(\"POST\", \"/api/support/tickets\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Support ticket created\",\n        description: \"Your support ticket has been submitted successfully. We'll get back to you soon!\",\n      });\n      supportForm.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/support/tickets\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to create ticket\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitTicket = (data: z.infer<typeof supportTicketSchema>) => {\n    createTicketMutation.mutate(data);\n  };\n\n  const toggleFaq = (index: number) => {\n    setOpenFaqs(prev => \n      prev.includes(index) \n        ? prev.filter(i => i !== index)\n        : [...prev, index]\n    );\n  };\n\n  const filteredFaqs = faqs.filter(faq =>\n    faq.question.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    faq.answer.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"flex min-h-screen bg-background\">\n      <Sidebar open={sidebarOpen} setOpen={setSidebarOpen} />\n      \n      <div className=\"flex-1 lg:ml-64\">\n        {/* Header */}\n        <div className=\"bg-background border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"font-heading text-2xl font-bold\">Help & Support</h1>\n              <p className=\"text-muted-foreground\">Get help and find answers to common questions</p>\n            </div>\n            {isMobile && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSidebarOpen(true)}\n                data-testid=\"button-mobile-menu\"\n              >\n                <span className=\"material-symbols-outlined\">menu</span>\n              </Button>\n            )}\n          </div>\n        </div>\n\n        <div className=\"p-6\">\n          {/* Search Bar */}\n          <div className=\"max-w-2xl mx-auto mb-12\">\n            <div className=\"relative\">\n              <span className=\"material-symbols-outlined absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                search\n              </span>\n              <Input\n                type=\"text\"\n                placeholder=\"Search for help articles...\"\n                className=\"pl-10\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                data-testid=\"input-search-help\"\n              />\n            </div>\n          </div>\n\n          {/* Quick Help Cards */}\n          <div className=\"grid md:grid-cols-3 gap-6 mb-12\">\n            <Card className=\"hover:border-primary transition-colors cursor-pointer\" data-testid=\"card-getting-started\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                  <span className=\"material-symbols-outlined text-primary\">help</span>\n                </div>\n                <h3 className=\"font-heading text-lg font-semibold mb-2\">Getting Started</h3>\n                <p className=\"text-muted-foreground text-sm\">Learn the basics and set up your account</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:border-primary transition-colors cursor-pointer\" data-testid=\"card-api-docs\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-chart-2/10 rounded-lg flex items-center justify-center mb-4\">\n                  <span className=\"material-symbols-outlined text-chart-2\">code</span>\n                </div>\n                <h3 className=\"font-heading text-lg font-semibold mb-2\">API Documentation</h3>\n                <p className=\"text-muted-foreground text-sm\">Integrate our AI services into your applications</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:border-primary transition-colors cursor-pointer\" data-testid=\"card-billing-help\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-chart-3/10 rounded-lg flex items-center justify-center mb-4\">\n                  <span className=\"material-symbols-outlined text-chart-3\">account_balance_wallet</span>\n                </div>\n                <h3 className=\"font-heading text-lg font-semibold mb-2\">Billing & Credits</h3>\n                <p className=\"text-muted-foreground text-sm\">Understand pricing, billing, and credit usage</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* FAQ Section */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Frequently Asked Questions</CardTitle>\n                  <CardDescription>Find answers to common questions</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {filteredFaqs.length === 0 ? (\n                      <div className=\"text-center py-8\">\n                        <span className=\"material-symbols-outlined text-muted-foreground text-4xl mb-2 block\">search_off</span>\n                        <p className=\"text-muted-foreground\">No FAQs found matching your search.</p>\n                      </div>\n                    ) : (\n                      filteredFaqs.map((faq, index) => (\n                        <Collapsible\n                          key={index}\n                          open={openFaqs.includes(index)}\n                          onOpenChange={() => toggleFaq(index)}\n                        >\n                          <CollapsibleTrigger asChild>\n                            <Button\n                              variant=\"ghost\"\n                              className=\"w-full text-left p-4 hover:bg-accent transition-colors flex items-center justify-between border border-border rounded-lg\"\n                              data-testid={`faq-toggle-${index}`}\n                            >\n                              <span className=\"font-medium\">{faq.question}</span>\n                              <span className=\"material-symbols-outlined\">\n                                {openFaqs.includes(index) ? 'expand_less' : 'expand_more'}\n                              </span>\n                            </Button>\n                          </CollapsibleTrigger>\n                          <CollapsibleContent className=\"px-4 pb-4 text-sm text-muted-foreground\">\n                            {faq.answer}\n                          </CollapsibleContent>\n                        </Collapsible>\n                      ))\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Contact Support Sidebar */}\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Contact Support</CardTitle>\n                  <CardDescription>Get in touch with our team</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3 p-3 border border-border rounded-lg hover:bg-accent transition-colors cursor-pointer\" data-testid=\"contact-email\">\n                    <span className=\"material-symbols-outlined text-primary\">email</span>\n                    <div>\n                      <div className=\"font-medium\">Email Support</div>\n                      <div className=\"text-sm text-muted-foreground\">support@aisaas.com</div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3 p-3 border border-border rounded-lg hover:bg-accent transition-colors cursor-pointer\" data-testid=\"contact-forum\">\n                    <span className=\"material-symbols-outlined text-primary\">forum</span>\n                    <div>\n                      <div className=\"font-medium\">Community Forum</div>\n                      <div className=\"text-sm text-muted-foreground\">Get help from community</div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3 p-3 border border-border rounded-lg hover:bg-accent transition-colors cursor-pointer\" data-testid=\"contact-chat\">\n                    <span className=\"material-symbols-outlined text-primary\">chat</span>\n                    <div>\n                      <div className=\"font-medium\">Live Chat</div>\n                      <div className=\"text-sm text-muted-foreground\">Chat with our team</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Submit a Ticket</CardTitle>\n                  <CardDescription>Create a support ticket for personalized help</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...supportForm}>\n                    <form onSubmit={supportForm.handleSubmit(handleSubmitTicket)} className=\"space-y-4\">\n                      <FormField\n                        control={supportForm.control}\n                        name=\"subject\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Subject</FormLabel>\n                            <FormControl>\n                              <Input\n                                {...field}\n                                placeholder=\"Brief description of your issue\"\n                                data-testid=\"input-ticket-subject\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={supportForm.control}\n                        name=\"category\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Category</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-ticket-category\">\n                                  <SelectValue placeholder=\"Select a category\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"technical\">Technical Issue</SelectItem>\n                                <SelectItem value=\"billing\">Billing Question</SelectItem>\n                                <SelectItem value=\"feature\">Feature Request</SelectItem>\n                                <SelectItem value=\"account\">Account Issue</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={supportForm.control}\n                        name=\"message\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Message</FormLabel>\n                            <FormControl>\n                              <Textarea\n                                {...field}\n                                rows={4}\n                                placeholder=\"Describe your issue in detail...\"\n                                data-testid=\"textarea-ticket-message\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button\n                        type=\"submit\"\n                        className=\"w-full\"\n                        disabled={createTicketMutation.isPending}\n                        data-testid=\"button-submit-ticket\"\n                      >\n                        {createTicketMutation.isPending ? \"Submitting...\" : \"Submit Ticket\"}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n\n              {/* My Tickets */}\n              {tickets && tickets.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>My Tickets</CardTitle>\n                    <CardDescription>Your recent support tickets</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {tickets.slice(0, 3).map((ticket: any) => (\n                        <div key={ticket.id} className=\"p-3 border border-border rounded-lg\">\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <span className=\"font-medium text-sm\">{ticket.subject}</span>\n                            <span className={`text-xs px-2 py-1 rounded-full ${\n                              ticket.status === 'open' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300' :\n                              ticket.status === 'resolved' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' :\n                              'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300'\n                            }`}>\n                              {ticket.status}\n                            </span>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {new Date(ticket.createdAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17962},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}